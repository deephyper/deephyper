
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_transfer_learning_for_hps.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plot_transfer_learning_for_hps.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_transfer_learning_for_hps.py:


Transfer Learning for Hyperparameter Search
===========================================

**Author(s)**: Romain Egele.

In this example we present how to apply transfer-learning for hyperparameter search. Let's assume you have a bunch of similar tasks for example the search of neural networks hyperparameters for different datasets. You can easily imagine that close choices of hyperparameters can perform well these different datasets even if some light additional tuning can help improve the performance. Therefore, you can perform an expensive search once to then reuse the explored set of hyperparameters of thid search and bias the following search with it. Here, we will use a cheap to compute and easy to understand example where we maximise the :math:`f(x) = -\sum_{i=0}^{n-1}` function. In this case the size of the problem can be defined by the variable :math:`n`. We will start by optimizing the small-size problem where :math:`n=1`, then apply transfer-learning from to optimize the larger-size problem where :math:`n=2` and visualize the difference if were not to apply transfer-learning on this larger problem instance.

Let us start by defining the run-functions of the small and large scale problems:

.. GENERATED FROM PYTHON SOURCE LINES 14-25

.. code-block:: Python

    import functools


    def run(config: dict, N: int) -> float:
        y = -sum([config[f"x{i}"] ** 2 for i in range(N)])
        return y


    run_small = functools.partial(run, N=1)
    run_large = functools.partial(run, N=2)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Then, we can define the hyperparameter problem space based on :math:`n`

.. GENERATED FROM PYTHON SOURCE LINES 27-36

.. code-block:: Python

    from deephyper.hpo import HpProblem


    N = 1
    problem_small = HpProblem()
    for i in range(N):
        problem_small.add_hyperparameter((-10.0, 10.0), f"x{i}")
    problem_small





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x0, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    N = 2
    problem_large = HpProblem()
    for i in range(N):
        problem_large.add_hyperparameter((-10.0, 10.0), f"x{i}")
    problem_large





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x0, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0
        x1, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 44-45

Then, we define setup the search and execute it:

.. GENERATED FROM PYTHON SOURCE LINES 45-57

.. code-block:: Python

    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback
    from deephyper.hpo import CBO

    results = {}
    max_evals = 20
    evaluator_small = Evaluator.create(
        run_small, method="serial", method_kwargs={"callbacks": [TqdmCallback()]}
    )
    search_small = CBO(problem_small, evaluator_small, random_state=42)
    results["Small"] = search_small.search(max_evals)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/20 [00:00<?, ?it/s]      5%|▌         | 1/20 [00:00<00:00, 62601.55it/s, failures=0, objective=-3.23]     10%|█         | 2/20 [00:00<00:00, 335.62it/s, failures=0, objective=-3.23]       15%|█▌        | 3/20 [00:00<00:00, 245.30it/s, failures=0, objective=-1.22]     20%|██        | 4/20 [00:00<00:00, 224.90it/s, failures=0, objective=-1.22]     25%|██▌       | 5/20 [00:00<00:00, 204.73it/s, failures=0, objective=-1.22]     30%|███       | 6/20 [00:00<00:00, 188.61it/s, failures=0, objective=-1.22]     35%|███▌      | 7/20 [00:00<00:00, 187.45it/s, failures=0, objective=-1.22]     40%|████      | 8/20 [00:00<00:00, 182.07it/s, failures=0, objective=-0.754]     45%|████▌     | 9/20 [00:00<00:00, 181.35it/s, failures=0, objective=-0.754]     50%|█████     | 10/20 [00:00<00:00, 181.36it/s, failures=0, objective=-0.754]     55%|█████▌    | 11/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.754]      55%|█████▌    | 11/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.754]     60%|██████    | 12/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.754]     65%|██████▌   | 13/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.26]      70%|███████   | 14/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.0145]     75%|███████▌  | 15/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.0145]     80%|████████  | 16/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.0145]     85%|████████▌ | 17/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.0145]     90%|█████████ | 18/20 [00:00<00:00, 79.03it/s, failures=0, objective=-0.0145]     95%|█████████▌| 19/20 [00:00<00:00, 20.80it/s, failures=0, objective=-0.0145]     95%|█████████▌| 19/20 [00:00<00:00, 20.80it/s, failures=0, objective=-0.00148]    100%|██████████| 20/20 [00:00<00:00, 20.80it/s, failures=0, objective=-0.000458]



.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: Python

    evaluator_large = Evaluator.create(
        run_large, method="serial", method_kwargs={"callbacks": [TqdmCallback()]}
    )
    search_large = CBO(problem_large, evaluator_large, random_state=42)
    results["Large"] = search_large.search(max_evals)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0/20 [00:00<?, ?it/s]
      5%|▌         | 1/20 [00:00<00:00, 41943.04it/s, failures=0, objective=-48.8]
     10%|█         | 2/20 [00:00<00:00, 189.68it/s, failures=0, objective=-40.3]  
     15%|█▌        | 3/20 [00:00<00:00, 144.05it/s, failures=0, objective=-40.3]
     20%|██        | 4/20 [00:00<00:00, 121.17it/s, failures=0, objective=-6.24]
     25%|██▌       | 5/20 [00:00<00:00, 115.18it/s, failures=0, objective=-6.24]
     30%|███       | 6/20 [00:00<00:00, 111.80it/s, failures=0, objective=-6.24]
     35%|███▌      | 7/20 [00:00<00:00, 108.41it/s, failures=0, objective=-6.24]
     40%|████      | 8/20 [00:00<00:00, 106.72it/s, failures=0, objective=-2.88]
     45%|████▌     | 9/20 [00:00<00:00, 105.54it/s, failures=0, objective=-2.88]
     50%|█████     | 10/20 [00:00<00:00, 103.60it/s, failures=0, objective=-2.88]
     55%|█████▌    | 11/20 [00:00<00:00, 61.31it/s, failures=0, objective=-2.88] 
     55%|█████▌    | 11/20 [00:00<00:00, 61.31it/s, failures=0, objective=-2.88]
     60%|██████    | 12/20 [00:00<00:00, 61.31it/s, failures=0, objective=-2.88]
     65%|██████▌   | 13/20 [00:00<00:00, 61.31it/s, failures=0, objective=-2.88]
     70%|███████   | 14/20 [00:00<00:00, 61.31it/s, failures=0, objective=-0.00379]
     75%|███████▌  | 15/20 [00:00<00:00, 61.31it/s, failures=0, objective=-0.00379]
     80%|████████  | 16/20 [00:00<00:00, 61.31it/s, failures=0, objective=-0.00379]
     85%|████████▌ | 17/20 [00:00<00:00, 61.31it/s, failures=0, objective=-0.00379]
     90%|█████████ | 18/20 [00:00<00:00, 19.45it/s, failures=0, objective=-0.00379]
     90%|█████████ | 18/20 [00:00<00:00, 19.45it/s, failures=0, objective=-0.00379]
     95%|█████████▌| 19/20 [00:00<00:00, 19.45it/s, failures=0, objective=-0.00379]
    100%|██████████| 20/20 [00:01<00:00, 19.45it/s, failures=0, objective=-0.00379]



.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: Python

    evaluator_large_tl = Evaluator.create(
        run_large, method="serial", method_kwargs={"callbacks": [TqdmCallback()]}
    )
    search_large_tl = CBO(problem_large, evaluator_large_tl, random_state=42)
    search_large_tl.fit_generative_model(results["Small"])
    results["Large+TL"] = search_large_tl.search(max_evals)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/romainegele/Documents/Argonne/deephyper/deephyper/hpo/_cbo.py:791: UserWarning: The value of q=0.9 is replaced by q_max=0.5 because a minimum of 10 samples are required to perform transfer-learning!
      warnings.warn(


      0%|          | 0/20 [00:00<?, ?it/s]

      5%|▌         | 1/20 [00:00<00:00, 25115.59it/s, failures=0, objective=-35.3]

     10%|█         | 2/20 [00:00<00:01, 13.65it/s, failures=0, objective=-35.3]   

     10%|█         | 2/20 [00:00<00:01, 13.65it/s, failures=0, objective=-23.8]

     15%|█▌        | 3/20 [00:00<00:01, 13.65it/s, failures=0, objective=-23.8]

     20%|██        | 4/20 [00:00<00:01,  8.61it/s, failures=0, objective=-23.8]

     20%|██        | 4/20 [00:00<00:01,  8.61it/s, failures=0, objective=-23.8]

     25%|██▌       | 5/20 [00:00<00:01,  8.01it/s, failures=0, objective=-23.8]

     25%|██▌       | 5/20 [00:00<00:01,  8.01it/s, failures=0, objective=-23.8]

     30%|███       | 6/20 [00:00<00:01,  7.59it/s, failures=0, objective=-23.8]

     30%|███       | 6/20 [00:00<00:01,  7.59it/s, failures=0, objective=-1]   

     35%|███▌      | 7/20 [00:01<00:04,  3.14it/s, failures=0, objective=-1]

     35%|███▌      | 7/20 [00:01<00:04,  3.14it/s, failures=0, objective=-1]

     40%|████      | 8/20 [00:01<00:03,  3.73it/s, failures=0, objective=-1]

     40%|████      | 8/20 [00:01<00:03,  3.73it/s, failures=0, objective=-1]

     45%|████▌     | 9/20 [00:01<00:02,  4.30it/s, failures=0, objective=-1]

     45%|████▌     | 9/20 [00:01<00:02,  4.30it/s, failures=0, objective=-1]

     50%|█████     | 10/20 [00:01<00:02,  4.84it/s, failures=0, objective=-1]

     50%|█████     | 10/20 [00:01<00:02,  4.84it/s, failures=0, objective=-1]

     55%|█████▌    | 11/20 [00:02<00:01,  4.71it/s, failures=0, objective=-1]

     55%|█████▌    | 11/20 [00:02<00:01,  4.71it/s, failures=0, objective=-0.626]

     60%|██████    | 12/20 [00:02<00:01,  4.61it/s, failures=0, objective=-0.626]

     60%|██████    | 12/20 [00:02<00:01,  4.61it/s, failures=0, objective=-0.457]

     65%|██████▌   | 13/20 [00:02<00:01,  4.54it/s, failures=0, objective=-0.457]

     65%|██████▌   | 13/20 [00:02<00:01,  4.54it/s, failures=0, objective=-0.457]

     70%|███████   | 14/20 [00:02<00:01,  4.48it/s, failures=0, objective=-0.457]

     70%|███████   | 14/20 [00:02<00:01,  4.48it/s, failures=0, objective=-0.303]

     75%|███████▌  | 15/20 [00:03<00:01,  4.43it/s, failures=0, objective=-0.303]

     75%|███████▌  | 15/20 [00:03<00:01,  4.43it/s, failures=0, objective=-0.303]

     80%|████████  | 16/20 [00:03<00:00,  4.36it/s, failures=0, objective=-0.303]

     80%|████████  | 16/20 [00:03<00:00,  4.36it/s, failures=0, objective=-0.303]

     85%|████████▌ | 17/20 [00:03<00:00,  4.32it/s, failures=0, objective=-0.303]

     85%|████████▌ | 17/20 [00:03<00:00,  4.32it/s, failures=0, objective=-0.303]

     90%|█████████ | 18/20 [00:03<00:00,  4.31it/s, failures=0, objective=-0.303]

     90%|█████████ | 18/20 [00:03<00:00,  4.31it/s, failures=0, objective=-0.303]

     95%|█████████▌| 19/20 [00:04<00:00,  4.30it/s, failures=0, objective=-0.303]

     95%|█████████▌| 19/20 [00:04<00:00,  4.30it/s, failures=0, objective=-0.303]

    100%|██████████| 20/20 [00:04<00:00,  4.29it/s, failures=0, objective=-0.303]

    100%|██████████| 20/20 [00:04<00:00,  4.29it/s, failures=0, objective=-0.303]



.. GENERATED FROM PYTHON SOURCE LINES 73-74

Finally, we compare the results and quickly see that transfer-learning provided a consequant speed-up for the search:

.. GENERATED FROM PYTHON SOURCE LINES 74-88

.. code-block:: Python

    import matplotlib.pyplot as plt

    plt.figure()

    for strategy, df in results.items():
        x = [i for i in range(len(df))]
        plt.scatter(x, df.objective, label=strategy, alpha=0.5)
        plt.plot(x, df.objective.cummax(), alpha=0.5)

    plt.xlabel("Time (sec.)")
    plt.ylabel("Objective")
    plt.grid()
    plt.legend()
    plt.show()



.. image-sg:: /examples/images/sphx_glr_plot_transfer_learning_for_hps_001.png
   :alt: plot transfer learning for hps
   :srcset: /examples/images/sphx_glr_plot_transfer_learning_for_hps_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.590 seconds)


.. _sphx_glr_download_examples_plot_transfer_learning_for_hps.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_transfer_learning_for_hps.ipynb <plot_transfer_learning_for_hps.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_transfer_learning_for_hps.py <plot_transfer_learning_for_hps.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_transfer_learning_for_hps.zip <plot_transfer_learning_for_hps.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
