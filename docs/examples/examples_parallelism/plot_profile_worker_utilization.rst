
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/examples_parallelism/plot_profile_worker_utilization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_examples_parallelism_plot_profile_worker_utilization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_examples_parallelism_plot_profile_worker_utilization.py:


Profile the Worker Utilization
==============================

**Author(s)**: Romain Egele.

This example demonstrates the advantages of parallel evaluations over serial
evaluations. We start by defining an artificial black-box ``run``-function by
using the Ackley function:

.. image:: https://www.sfu.ca/~ssurjano/ackley.png
  :width: 400
  :alt: Ackley Function in 2D

We will use the ``time.sleep`` function to simulate a budget of 2 secondes of
execution in average which helps illustrate the advantage of parallel
evaluations. The ``@profile`` decorator is useful to collect starting/ending
time of the ``run``-function execution which help us know exactly when we are
inside the black-box. This decorator is necessary when profiling the worker
utilization. When using this decorator, the ``run``-function will return a
dictionnary with 2 new keys ``"timestamp_start"`` and ``"timestamp_end"``.
The ``run``-function is defined in a separate module because of
the "multiprocessing" backend that we are using in this example.

.. literalinclude:: ../../examples/black_box_util.py
   :language: python
   :emphasize-lines: 19-28
   :linenos:

After defining the black-box we can continue with the definition of our main script:

.. GENERATED FROM PYTHON SOURCE LINES 32-45

.. code-block:: Python


    import black_box_util as black_box
    import matplotlib.pyplot as plt

    from deephyper.analysis import figure_size
    from deephyper.analysis.hpo import (
        plot_search_trajectory_single_objective_hpo,
        plot_worker_utilization,
    )
    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback
    from deephyper.hpo import CBO, HpProblem








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Then we define the variable(s) we want to optimize. For this problem we
optimize Ackley in a 2-dimensional search space, the true minimul is
located at ``(0, 0)``.

.. GENERATED FROM PYTHON SOURCE LINES 49-57

.. code-block:: Python


    nb_dim = 2
    problem = HpProblem()
    for i in range(nb_dim):
        problem.add_hyperparameter((-32.768, 32.768), f"x{i}")
    problem






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x0, Type: UniformFloat, Range: [-32.768, 32.768], Default: 0.0
        x1, Type: UniformFloat, Range: [-32.768, 32.768], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 58-59

Then we define a parallel search.

.. GENERATED FROM PYTHON SOURCE LINES 59-80

.. code-block:: Python


    if __name__ == "__main__":
        timeout = 20
        num_workers = 4
        results = {}

        evaluator = Evaluator.create(
            black_box.run_ackley,
            method="process",
            method_kwargs={
                "num_workers": num_workers,
                "callbacks": [TqdmCallback()],
            },
        )
        search = CBO(
            problem,
            evaluator,
            random_state=42,
        )
        results = search.search(timeout=timeout)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none




    0it [00:00, ?it/s]


    1it [00:00, 2763.05it/s, failures=0, objective=-19.8]


    2it [00:00, 11.22it/s, failures=0, objective=-19.8]  


    2it [00:00, 11.22it/s, failures=0, objective=-19.8]


    3it [00:00, 11.22it/s, failures=0, objective=-19.8]


    4it [00:01,  3.48it/s, failures=0, objective=-19.8]


    4it [00:01,  3.48it/s, failures=0, objective=-19.8]


    5it [00:01,  3.23it/s, failures=0, objective=-19.8]


    5it [00:01,  3.23it/s, failures=0, objective=-15.4]


    6it [00:01,  3.23it/s, failures=0, objective=-15.4]


    7it [00:01,  3.71it/s, failures=0, objective=-15.4]


    7it [00:01,  3.71it/s, failures=0, objective=-15.4]


    8it [00:02,  2.07it/s, failures=0, objective=-15.4]


    8it [00:02,  2.07it/s, failures=0, objective=-15.4]


    9it [00:03,  2.25it/s, failures=0, objective=-15.4]


    9it [00:03,  2.25it/s, failures=0, objective=-15.4]


    10it [00:03,  2.60it/s, failures=0, objective=-15.4]


    10it [00:03,  2.60it/s, failures=0, objective=-12.6]


    11it [00:03,  2.58it/s, failures=0, objective=-12.6]


    11it [00:03,  2.58it/s, failures=0, objective=-12.6]


    12it [00:04,  1.76it/s, failures=0, objective=-12.6]


    12it [00:04,  1.76it/s, failures=0, objective=-12.6]


    13it [00:05,  2.16it/s, failures=0, objective=-12.6]


    13it [00:05,  2.16it/s, failures=0, objective=-12.6]


    14it [00:06,  1.72it/s, failures=0, objective=-12.6]


    14it [00:06,  1.72it/s, failures=0, objective=-12.6]


    15it [00:06,  1.57it/s, failures=0, objective=-12.6]


    15it [00:06,  1.57it/s, failures=0, objective=-12.6]


    16it [00:07,  1.68it/s, failures=0, objective=-12.6]


    16it [00:07,  1.68it/s, failures=0, objective=-12.6]


    17it [00:08,  1.47it/s, failures=0, objective=-12.6]


    17it [00:08,  1.47it/s, failures=0, objective=-12.6]


    18it [00:08,  1.69it/s, failures=0, objective=-12.6]


    18it [00:08,  1.69it/s, failures=0, objective=-12.6]


    19it [00:09,  1.63it/s, failures=0, objective=-12.6]


    19it [00:09,  1.63it/s, failures=0, objective=-12.6]


    20it [00:09,  2.07it/s, failures=0, objective=-12.6]


    20it [00:09,  2.07it/s, failures=0, objective=-12.6]


    21it [00:09,  2.30it/s, failures=0, objective=-12.6]


    21it [00:09,  2.30it/s, failures=0, objective=-12.6]


    22it [00:10,  1.68it/s, failures=0, objective=-12.6]


    22it [00:10,  1.68it/s, failures=0, objective=-12.6]


    23it [00:12,  1.21it/s, failures=0, objective=-12.6]


    23it [00:12,  1.21it/s, failures=0, objective=-12.6]


    24it [00:12,  1.62it/s, failures=0, objective=-12.6]


    24it [00:12,  1.62it/s, failures=0, objective=-12.6]


    25it [00:12,  1.62it/s, failures=0, objective=-12.6]


    26it [00:12,  2.27it/s, failures=0, objective=-12.6]


    26it [00:12,  2.27it/s, failures=0, objective=-12.6]


    27it [00:13,  1.62it/s, failures=0, objective=-12.6]


    27it [00:13,  1.62it/s, failures=0, objective=-12.6]


    28it [00:14,  1.66it/s, failures=0, objective=-12.6]


    28it [00:14,  1.66it/s, failures=0, objective=-12.6]


    29it [00:14,  2.07it/s, failures=0, objective=-12.6]


    29it [00:14,  2.07it/s, failures=0, objective=-12.6]


    30it [00:14,  2.31it/s, failures=0, objective=-12.6]


    30it [00:14,  2.31it/s, failures=0, objective=-12.6]


    31it [00:15,  1.68it/s, failures=0, objective=-12.6]


    31it [00:15,  1.68it/s, failures=0, objective=-12.6]


    32it [00:16,  1.79it/s, failures=0, objective=-12.6]


    32it [00:16,  1.79it/s, failures=0, objective=-12.6]


    33it [00:16,  2.24it/s, failures=0, objective=-12.6]


    33it [00:16,  2.24it/s, failures=0, objective=-12.6]


    34it [00:16,  2.89it/s, failures=0, objective=-12.6]


    34it [00:16,  2.89it/s, failures=0, objective=-12.6]


    35it [00:18,  1.28it/s, failures=0, objective=-12.6]


    35it [00:18,  1.28it/s, failures=0, objective=-12.6]


    36it [00:18,  1.51it/s, failures=0, objective=-12.6]


    36it [00:18,  1.51it/s, failures=0, objective=-12.6]


    37it [00:18,  1.51it/s, failures=0, objective=-12.6]


    38it [00:18,  1.51it/s, failures=0, objective=-12.6]



.. GENERATED FROM PYTHON SOURCE LINES 81-82

Finally, we plot the results from the collected DataFrame.

.. GENERATED FROM PYTHON SOURCE LINES 82-106

.. code-block:: Python


    if __name__ == "__main__":
        t0 = results["m:timestamp_start"].iloc[0]
        results["m:timestamp_start"] = results["m:timestamp_start"] - t0
        results["m:timestamp_end"] = results["m:timestamp_end"] - t0
        tmax = results["m:timestamp_end"].max()

        fig, axes = plt.subplots(
            nrows=2,
            ncols=1,
            sharex=True,
            figsize=figure_size(width=600),
        )

        plot_search_trajectory_single_objective_hpo(
            results, mode="min", x_units="seconds", ax=axes[0]
        )

        plot_worker_utilization(
            results, num_workers=num_workers, profile_type="start/end", ax=axes[1]
        )

        plt.tight_layout()
        plt.show()



.. image-sg:: /examples/examples_parallelism/images/sphx_glr_plot_profile_worker_utilization_001.png
   :alt: plot profile worker utilization
   :srcset: /examples/examples_parallelism/images/sphx_glr_plot_profile_worker_utilization_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.647 seconds)


.. _sphx_glr_download_examples_examples_parallelism_plot_profile_worker_utilization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_worker_utilization.ipynb <plot_profile_worker_utilization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_worker_utilization.py <plot_profile_worker_utilization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_worker_utilization.zip <plot_profile_worker_utilization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
