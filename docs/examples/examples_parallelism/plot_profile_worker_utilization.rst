
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/examples_parallelism/plot_profile_worker_utilization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_examples_parallelism_plot_profile_worker_utilization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_examples_parallelism_plot_profile_worker_utilization.py:


Profile the Worker Utilization
==============================

**Author(s)**: Romain Egele.

This example demonstrates the advantages of parallel evaluations over serial
evaluations. We start by defining an artificial black-box ``run``-function by
using the Ackley function:

.. image:: https://www.sfu.ca/~ssurjano/ackley.png
  :width: 400
  :alt: Ackley Function in 2D

.. GENERATED FROM PYTHON SOURCE LINES 16-32

.. dropdown:: Code (Import statements)

    .. code-block:: Python


        import time

        import matplotlib.pyplot as plt
        import numpy as np

        from deephyper.analysis import figure_size
        from deephyper.analysis.hpo import (
            plot_search_trajectory_single_objective_hpo,
            plot_worker_utilization,
        )
        from deephyper.evaluator import Evaluator, profile
        from deephyper.evaluator.callback import TqdmCallback
        from deephyper.hpo import CBO, HpProblem








.. GENERATED FROM PYTHON SOURCE LINES 33-34

We define the Ackley function:

.. GENERATED FROM PYTHON SOURCE LINES 34-45

.. dropdown:: Code (Ackley function)

    .. code-block:: Python


        def ackley(x, a=20, b=0.2, c=2 * np.pi):
            d = len(x)
            s1 = np.sum(x**2)
            s2 = np.sum(np.cos(c * x))
            term1 = -a * np.exp(-b * np.sqrt(s1 / d))
            term2 = -np.exp(s2 / d)
            y = term1 + term2 + a + np.exp(1)
            return y








.. GENERATED FROM PYTHON SOURCE LINES 46-52

We will use the ``time.sleep`` function to simulate a budget of 2 secondes of execution in average 
which helps illustrate the advantage of parallel evaluations. The ``@profile`` decorator is useful 
to collect starting/ending time of the ``run``-function execution which help us know exactly when 
we are inside the black-box. This decorator is necessary when profiling the worker utilization. When 
using this decorator, the ``run``-function will return a dictionnary with 2 new keys ``"timestamp_start"`` 
and ``"timestamp_end"``.

.. GENERATED FROM PYTHON SOURCE LINES 52-65

.. code-block:: Python


    @profile
    def run_ackley(config, sleep_loc=2, sleep_scale=0.5):
        # to simulate the computation of an expensive black-box
        if sleep_loc > 0:
            t_sleep = np.random.normal(loc=sleep_loc, scale=sleep_scale)
            t_sleep = max(t_sleep, 0)
            time.sleep(t_sleep)

        x = np.array([config[k] for k in config if "x" in k])
        x = np.asarray_chkfinite(x)  # ValueError if any NaN or Inf
        return -ackley(x)  # maximisation is performed








.. GENERATED FROM PYTHON SOURCE LINES 66-69

Then we define the variable(s) we want to optimize. For this problem we
optimize Ackley in a 2-dimensional search space, the true minimul is
located at ``(0, 0)``.

.. GENERATED FROM PYTHON SOURCE LINES 69-81

.. code-block:: Python


    def create_problem(nb_dim=2):
        nb_dim = 2
        problem = HpProblem()
        for i in range(nb_dim):
            problem.add_hyperparameter((-32.768, 32.768), f"x{i}")
        return problem

    problem = create_problem()
    problem






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x0, Type: UniformFloat, Range: [-32.768, 32.768], Default: 0.0
        x1, Type: UniformFloat, Range: [-32.768, 32.768], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 82-83

Then we define a parallel search.

.. GENERATED FROM PYTHON SOURCE LINES 83-109

.. code-block:: Python

    def execute_search(timeout, num_workers):

        evaluator = Evaluator.create(
            run_ackley,
            method="process",
            method_kwargs={
                "num_workers": num_workers,
                "callbacks": [TqdmCallback()],
            },
        )

        search = CBO(
            problem,
            evaluator,
            random_state=42,
        )

        results = search.search(timeout=timeout)

        return results

    if __name__ == "__main__":
        timeout = 20
        num_workers = 4
        results = execute_search(timeout, num_workers)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/romainegele/Documents/DeepHyper/deephyper/examples/examples_parallelism/plot_profile_worker_utilization.py", line 107, in <module>
        results = execute_search(timeout, num_workers)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/Users/romainegele/Documents/DeepHyper/deephyper/examples/examples_parallelism/plot_profile_worker_utilization.py", line 100, in execute_search
        results = search.search(timeout=timeout)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/hpo/_search.py", line 209, in search
        self._search(max_evals, timeout, max_evals_strict)
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/hpo/_cbo.py", line 569, in _search
        super()._search(max_evals, timeout, max_evals_strict)
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/hpo/_search.py", line 316, in _search
        new_results = self._evaluator.gather(self.gather_type, self.gather_batch_size)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/evaluator/_evaluator.py", line 425, in gather
        local_results = self.process_local_tasks_done(self._tasks_done)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/evaluator/_evaluator.py", line 508, in process_local_tasks_done
        job = task.result()
              ^^^^^^^^^^^^^
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/evaluator/_evaluator.py", line 350, in _execute
        job = await self.execute(job)
              ^^^^^^^^^^^^^^^^^^^^^^^
      File "/Users/romainegele/Documents/DeepHyper/deephyper/src/deephyper/evaluator/_process_pool.py", line 79, in execute
        output = await asyncio.wait_for(
                 ^^^^^^^^^^^^^^^^^^^^^^^
      File "/opt/homebrew/Cellar/python@3.12/3.12.7_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/tasks.py", line 520, in wait_for
        return await fut
               ^^^^^^^^^
    concurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.




.. GENERATED FROM PYTHON SOURCE LINES 110-111

Finally, we plot the results from the collected DataFrame.

.. GENERATED FROM PYTHON SOURCE LINES 111-135

.. dropdown:: Code (Plot search trajectory an workers utilization)

    .. code-block:: Python


        if __name__ == "__main__":
            t0 = results["m:timestamp_start"].iloc[0]
            results["m:timestamp_start"] = results["m:timestamp_start"] - t0
            results["m:timestamp_end"] = results["m:timestamp_end"] - t0
            tmax = results["m:timestamp_end"].max()

            fig, axes = plt.subplots(
                nrows=2,
                ncols=1,
                sharex=True,
                figsize=figure_size(width=600),
                tight_layout=True,
            )

            plot_search_trajectory_single_objective_hpo(
                results, mode="min", x_units="seconds", ax=axes[0],
            )

            plot_worker_utilization(
                results, num_workers=num_workers, profile_type="start/end", ax=axes[1],
            )
            plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.371 seconds)


.. _sphx_glr_download_examples_examples_parallelism_plot_profile_worker_utilization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_profile_worker_utilization.ipynb <plot_profile_worker_utilization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_profile_worker_utilization.py <plot_profile_worker_utilization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_profile_worker_utilization.zip <plot_profile_worker_utilization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
