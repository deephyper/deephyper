
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/examples_hpo/plot_hpo_text_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_examples_hpo_plot_hpo_text_classification.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_examples_hpo_plot_hpo_text_classification.py:


Hyperparameter search for text classification
=============================================

**Author(s)**: Romain Egele, Brett Eiffert.

 
In this tutorial we present how to use hyperparameter optimization on a text classification analysis example from the Pytorch documentation.
 
**Reference**:
This tutorial is based on materials from the Pytorch Documentation: `Text classification with the torchtext library <https://pytorch.org/tutorials/beginner/text_sentiment_ngrams_tutorial.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: bash

    %%bash
    pip install deephyper
    pip install ray
    pip install torch torchtext torchdata

.. GENERATED FROM PYTHON SOURCE LINES 24-26

Imports
-------

.. GENERATED FROM PYTHON SOURCE LINES 28-44

.. code-block:: Python

    import ray
    import json
    import pandas as pd
    from functools import partial

    import torch

    from torchtext.data.utils import get_tokenizer
    from torchtext.data.functional import to_map_style_dataset
    from torchtext.vocab import build_vocab_from_iterator

    from torch.utils.data import DataLoader
    from torch.utils.data.dataset import random_split

    from torch import nn








.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. note::
  The following can be used to detect if <b>CUDA</b> devices are available on the current host. Therefore, this notebook will automatically adapt the parallel execution based on the ressources available locally. However, it will not be the case if many compute nodes are requested.


.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    is_gpu_available = torch.cuda.is_available()
    n_gpus = torch.cuda.device_count()








.. GENERATED FROM PYTHON SOURCE LINES 54-59

The dataset
-----------

The torchtext library provides a few raw dataset iterators, which yield the raw text strings. For example, the :code:`AG_NEWS` dataset iterators yield the raw data as a tuple of label and text. It has four labels (1 : World 2 : Sports 3 : Business 4 : Sci/Tec).


.. GENERATED FROM PYTHON SOURCE LINES 61-79

.. code-block:: Python

    from torchtext.datasets import AG_NEWS

    def load_data(train_ratio, fast=False):
        train_iter, test_iter = AG_NEWS()
        train_dataset = to_map_style_dataset(train_iter)
        test_dataset = to_map_style_dataset(test_iter)
        num_train = int(len(train_dataset) * train_ratio)
        split_train, split_valid = \
            random_split(train_dataset, [num_train, len(train_dataset) - num_train])
    
        ## downsample
        if fast:
            split_train, _ = random_split(split_train, [int(len(split_train)*.05), int(len(split_train)*.95)])
            split_valid, _ = random_split(split_valid, [int(len(split_valid)*.05), int(len(split_valid)*.95)])
            test_dataset, _ = random_split(test_dataset, [int(len(test_dataset)*.05), int(len(test_dataset)*.95)])

        return split_train, split_valid, test_dataset








.. GENERATED FROM PYTHON SOURCE LINES 80-88

Preprocessing pipelines and Batch generation
--------------------------------------------

Here is an example for typical NLP data processing with tokenizer and vocabulary. The first step is to build a vocabulary with the raw training dataset. Here we use built in
factory function :code:`build_vocab_from_iterator` which accepts iterator that yield list or iterator of tokens. Users can also pass any special symbols to be added to the
vocabulary.

The vocabulary block converts a list of tokens into integers.

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: python

  vocab(['here', 'is', 'an', 'example'])
  >>> [475, 21, 30, 5286]

.. GENERATED FROM PYTHON SOURCE LINES 96-97

The text pipeline converts a text string into a list of integers based on the lookup table defined in the vocabulary. The label pipeline converts the label into integers. For example,

.. GENERATED FROM PYTHON SOURCE LINES 99-105

.. code-block:: python

  text_pipeline('here is the an example')
  >>> [475, 21, 2, 30, 5286]
  label_pipeline('10')
  >>> 9 

.. GENERATED FROM PYTHON SOURCE LINES 107-136

.. code-block:: Python

    train_iter = AG_NEWS(split='train')
    num_class = 4

    tokenizer = get_tokenizer('basic_english')

    def yield_tokens(data_iter):
        for _, text in data_iter:
            yield tokenizer(text)

    vocab = build_vocab_from_iterator(yield_tokens(train_iter), specials=["<unk>"])
    vocab.set_default_index(vocab["<unk>"])
    vocab_size = len(vocab)

    text_pipeline = lambda x: vocab(tokenizer(x))
    label_pipeline = lambda x: int(x) - 1


    def collate_batch(batch, device):
        label_list, text_list, offsets = [], [], [0]
        for (_label, _text) in batch:
            label_list.append(label_pipeline(_label))
            processed_text = torch.tensor(text_pipeline(_text), dtype=torch.int64)
            text_list.append(processed_text)
            offsets.append(processed_text.size(0))
        label_list = torch.tensor(label_list, dtype=torch.int64)
        offsets = torch.tensor(offsets[:-1]).cumsum(dim=0)
        text_list = torch.cat(text_list)
        return label_list.to(device), text_list.to(device), offsets.to(device)








.. GENERATED FROM PYTHON SOURCE LINES 137-139

.. note:: The :code:`collate_fn` function works on a batch of samples generated from :code:`DataLoader`. The input to :code:`collate_fn` is a batch of data with the batch size in :code:`DataLoader`, and :code:`collate_fn` processes them according to the data processing pipelines declared previously.


.. GENERATED FROM PYTHON SOURCE LINES 141-145

Define the model
----------------

The model is composed of the `nn.EmbeddingBag <https://pytorch.org/docs/stable/nn.html?highlight=embeddingbag#torch.nn.EmbeddingBag>`_ layer plus a linear layer for the classification purpose.

.. GENERATED FROM PYTHON SOURCE LINES 147-165

.. code-block:: Python

    class TextClassificationModel(nn.Module):

        def __init__(self, vocab_size, embed_dim, num_class):
            super(TextClassificationModel, self).__init__()
            self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=False)
            self.fc = nn.Linear(embed_dim, num_class)
            self.init_weights()

        def init_weights(self):
            initrange = 0.5
            self.embedding.weight.data.uniform_(-initrange, initrange)
            self.fc.weight.data.uniform_(-initrange, initrange)
            self.fc.bias.data.zero_()

        def forward(self, text, offsets):
            embedded = self.embedding(text, offsets)
            return self.fc(embedded)








.. GENERATED FROM PYTHON SOURCE LINES 166-168

Define functions to train the model and evaluate results.
---------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 170-192

.. code-block:: Python

    def train(model, criterion, optimizer, dataloader):
        model.train()

        for _, (label, text, offsets) in enumerate(dataloader):
            optimizer.zero_grad()
            predicted_label = model(text, offsets)
            loss = criterion(predicted_label, label)
            loss.backward()
            torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)
            optimizer.step()

    def evaluate(model, dataloader):
        model.eval()
        total_acc, total_count = 0, 0

        with torch.no_grad():
            for _, (label, text, offsets) in enumerate(dataloader):
                predicted_label = model(text, offsets)
                total_acc += (predicted_label.argmax(1) == label).sum().item()
                total_count += label.size(0)
        return total_acc/total_count








.. GENERATED FROM PYTHON SOURCE LINES 193-203

Define the run-function
-----------------------

The run-function defines how the objective that we want to maximize is computed. It takes a :code:`config` dictionary as input and often returns a scalar value that we want to maximize. The :code:`config` contains a sample value of hyperparameters that we want to tune. In this example we will search for:

* :code:`num_epochs` (default value: :code:`10`)
* :code:`batch_size` (default value: :code:`64`)
* :code:`learning_rate` (default value: :code:`5`)

A hyperparameter value can be acessed easily in the dictionary through the corresponding key, for example :code:`config["units"]`.

.. GENERATED FROM PYTHON SOURCE LINES 205-230

.. code-block:: Python

    def get_run(train_ratio=0.95):
      def run(config: dict):
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

        embed_dim = 64
    
        collate_fn = partial(collate_batch, device=device)
        split_train, split_valid, _ = load_data(train_ratio, fast=True) # set fast=false for longer running, more accurate example
        train_dataloader = DataLoader(split_train, batch_size=int(config["batch_size"]),
                                    shuffle=True, collate_fn=collate_fn)
        valid_dataloader = DataLoader(split_valid, batch_size=int(config["batch_size"]),
                                    shuffle=True, collate_fn=collate_fn)

        model = TextClassificationModel(vocab_size, int(embed_dim), num_class).to(device)
      
        criterion = torch.nn.CrossEntropyLoss()
        optimizer = torch.optim.SGD(model.parameters(), lr=config["learning_rate"])

        for _ in range(1, int(config["num_epochs"]) + 1):
            train(model, criterion, optimizer, train_dataloader)
    
        accu_test = evaluate(model, valid_dataloader)
        return accu_test
      return run








.. GENERATED FROM PYTHON SOURCE LINES 231-232

We create two versions of :code:`run`, one quicker to evaluate for the search, with a small training dataset, and another one, for performance evaluation, which uses a normal training/validation ratio.

.. GENERATED FROM PYTHON SOURCE LINES 234-237

.. code-block:: Python

    quick_run = get_run(train_ratio=0.3)
    perf_run = get_run(train_ratio=0.95)








.. GENERATED FROM PYTHON SOURCE LINES 238-241

.. note:: The objective maximised by DeepHyper is the scalar value returned by the :code:`run`-function.

In this tutorial it corresponds to the validation accuracy of the model after training.

.. GENERATED FROM PYTHON SOURCE LINES 243-253

Define the Hyperparameter optimization problem
---------------------------------------------- 

Hyperparameter ranges are defined using the following syntax:

* Discrete integer ranges are generated from a tuple :code:`(lower: int, upper: int)`
* Continuous prarameters are generated from a tuple :code:`(lower: float, upper: float)`
* Categorical or nonordinal hyperparameter ranges can be given as a list of possible values :code:`[val1, val2, ...]`

We provide the default configuration of hyperparameters as a starting point of the problem.

.. GENERATED FROM PYTHON SOURCE LINES 255-268

.. code-block:: Python

    from deephyper.hpo import HpProblem

    problem = HpProblem()

    # Discrete hyperparameter (sampled with uniform prior)
    problem.add_hyperparameter((5, 20), "num_epochs", default_value=10)

    # Discrete and Real hyperparameters (sampled with log-uniform)
    problem.add_hyperparameter((8, 512, "log-uniform"), "batch_size", default_value=64)
    problem.add_hyperparameter((0.1, 10, "log-uniform"), "learning_rate", default_value=5)

    problem





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        batch_size, Type: UniformInteger, Range: [8, 512], Default: 64, on log-scale
        learning_rate, Type: UniformFloat, Range: [0.1, 10.0], Default: 5.0, on log-scale
        num_epochs, Type: UniformInteger, Range: [5, 20], Default: 10




.. GENERATED FROM PYTHON SOURCE LINES 269-273

Evaluate a default configuration
--------------------------------

We evaluate the performance of the default set of hyperparameters provided in the Pytorch tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 273-290

.. code-block:: Python


    #We launch the Ray run-time and execute the `run` function
    #with the default configuration
    if is_gpu_available:
        if not(ray.is_initialized()):
            ray.init(num_cpus=n_gpus, num_gpus=n_gpus, log_to_driver=False)
    
        run_default = ray.remote(num_cpus=1, num_gpus=1)(perf_run)
        objective_default = ray.get(run_default.remote(problem.default_configuration))
    else:
        if not(ray.is_initialized()):
            ray.init(num_cpus=1, log_to_driver=False)
        run_default = perf_run
        objective_default = run_default(problem.default_configuration)

    print(f"Accuracy Default Configuration:  {objective_default:.3f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-03-18 00:44:17,179 INFO worker.py:1832 -- Started a local Ray instance. View the dashboard at http://127.0.0.1:8265 
    Accuracy Default Configuration:  0.867




.. GENERATED FROM PYTHON SOURCE LINES 291-297

Define the evaluator object
---------------------------

The :code:`Evaluator` object allows to change the parallelization backend used by DeepHyper.  
It is a standalone object which schedules the execution of remote tasks. All evaluators needs a :code:`run_function` to be instantiated.  
Then a keyword :code:`method` defines the backend (e.g., :code:`"ray"`) and the :code:`method_kwargs` corresponds to keyword arguments of this chosen :code:`method`.

.. GENERATED FROM PYTHON SOURCE LINES 299-302

.. code-block:: python

  evaluator = Evaluator.create(run_function, method, method_kwargs)

.. GENERATED FROM PYTHON SOURCE LINES 304-307

Once created the :code:`evaluator.num_workers` gives access to the number of available parallel workers.

Finally, to submit and collect tasks to the evaluator one just needs to use the following interface:

.. GENERATED FROM PYTHON SOURCE LINES 309-316

.. code-block:: python

 	configs = [...]
 	evaluator.submit(configs)
	...
	tasks_done = evaluator.get("BATCH", size=1) # For asynchronous
	tasks_done = evaluator.get("ALL") # For batch synchronous

.. GENERATED FROM PYTHON SOURCE LINES 318-319

.. warning:: Each `Evaluator` saves its own state, therefore it is crucial to create a new evaluator when launching a fresh search.

.. GENERATED FROM PYTHON SOURCE LINES 321-351

.. code-block:: Python

    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback

    def get_evaluator(run_function):
        # Default arguments for Ray: 1 worker and 1 worker per evaluation
        method_kwargs = {
            "num_cpus": 1, 
            "num_cpus_per_task": 1,
            "callbacks": [TqdmCallback()]
        }

        # If GPU devices are detected then it will create 'n_gpus' workers
        # and use 1 worker for each evaluation
        if is_gpu_available:
            method_kwargs["num_cpus"] = n_gpus
            method_kwargs["num_gpus"] = n_gpus
            method_kwargs["num_cpus_per_task"] = 1
            method_kwargs["num_gpus_per_task"] = 1

        evaluator = Evaluator.create(
            run_function, 
            method="ray", 
            method_kwargs=method_kwargs
        )
        print(f"Created new evaluator with {evaluator.num_workers} worker{'s' if evaluator.num_workers > 1 else ''} and config: {method_kwargs}", )
    
        return evaluator

    evaluator_1 = get_evaluator(quick_run)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Created new evaluator with 1 worker and config: {'num_cpus': 1, 'num_cpus_per_task': 1, 'callbacks': [<deephyper.evaluator.callback.TqdmCallback object at 0x1339d1e20>]}




.. GENERATED FROM PYTHON SOURCE LINES 352-356

Define and run the Centralized Bayesian Optimization search (CBO)
-----------------------------------------------------------------

We create the CBO using the :code:`problem` and :code:`evaluator` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 358-360

.. code-block:: Python

    from deephyper.hpo import CBO








.. GENERATED FROM PYTHON SOURCE LINES 361-362

Instanciate the search with the problem and a specific evaluator

.. GENERATED FROM PYTHON SOURCE LINES 362-364

.. code-block:: Python

    search = CBO(problem, evaluator_1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    WARNING:root:Results file already exists, it will be renamed to /Users/35e/Projects/DeepHyper/deephyper/examples/examples_hpo/results_20250318-004434.csv




.. GENERATED FROM PYTHON SOURCE LINES 365-370

.. note:: 
  All DeepHyper's search algorithm have two stopping criteria:
      * :code:`max_evals (int)`: Defines the maximum number of evaluations that we want to perform. Default to :code:`-1` for an infinite number.
      * :code:`timeout (int)`: Defines a time budget (in seconds) before stopping the search. Default to :code:`None` for an infinite time budget.


.. GENERATED FROM PYTHON SOURCE LINES 372-374

.. code-block:: Python

    results = search.search(max_evals=30)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/30 [00:00<?, ?it/s]      3%|▎         | 1/30 [00:00<00:00, 1901.32it/s, failures=0, objective=0.357]      7%|▋         | 2/30 [00:04<01:08,  2.46s/it, failures=0, objective=0.357]        7%|▋         | 2/30 [00:04<01:08,  2.46s/it, failures=0, objective=0.357]     10%|█         | 3/30 [00:09<01:29,  3.30s/it, failures=0, objective=0.357]     10%|█         | 3/30 [00:09<01:29,  3.30s/it, failures=0, objective=0.357]     13%|█▎        | 4/30 [00:13<01:29,  3.45s/it, failures=0, objective=0.357]     13%|█▎        | 4/30 [00:13<01:29,  3.45s/it, failures=0, objective=0.576]     17%|█▋        | 5/30 [00:48<06:05, 14.63s/it, failures=0, objective=0.576]     17%|█▋        | 5/30 [00:48<06:05, 14.63s/it, failures=0, objective=0.586]     20%|██        | 6/30 [01:02<05:41, 14.24s/it, failures=0, objective=0.586]     20%|██        | 6/30 [01:02<05:41, 14.24s/it, failures=0, objective=0.586]     23%|██▎       | 7/30 [01:04<04:03, 10.57s/it, failures=0, objective=0.586]     23%|██▎       | 7/30 [01:04<04:03, 10.57s/it, failures=0, objective=0.586]     27%|██▋       | 8/30 [01:08<03:06,  8.48s/it, failures=0, objective=0.586]     27%|██▋       | 8/30 [01:08<03:06,  8.48s/it, failures=0, objective=0.586]     30%|███       | 9/30 [01:12<02:26,  6.97s/it, failures=0, objective=0.586]     30%|███       | 9/30 [01:12<02:26,  6.97s/it, failures=0, objective=0.586]     33%|███▎      | 10/30 [01:20<02:25,  7.28s/it, failures=0, objective=0.586]     33%|███▎      | 10/30 [01:20<02:25,  7.28s/it, failures=0, objective=0.776]     37%|███▋      | 11/30 [01:25<02:07,  6.71s/it, failures=0, objective=0.776]     37%|███▋      | 11/30 [01:25<02:07,  6.71s/it, failures=0, objective=0.776]     40%|████      | 12/30 [01:32<02:01,  6.78s/it, failures=0, objective=0.776]     40%|████      | 12/30 [01:32<02:01,  6.78s/it, failures=0, objective=0.776]     43%|████▎     | 13/30 [01:41<02:03,  7.27s/it, failures=0, objective=0.776]     43%|████▎     | 13/30 [01:41<02:03,  7.27s/it, failures=0, objective=0.776]     47%|████▋     | 14/30 [01:50<02:05,  7.83s/it, failures=0, objective=0.776]     47%|████▋     | 14/30 [01:50<02:05,  7.83s/it, failures=0, objective=0.794]     50%|█████     | 15/30 [01:56<01:51,  7.44s/it, failures=0, objective=0.794]     50%|█████     | 15/30 [01:56<01:51,  7.44s/it, failures=0, objective=0.797]     53%|█████▎    | 16/30 [02:03<01:38,  7.04s/it, failures=0, objective=0.797]     53%|█████▎    | 16/30 [02:03<01:38,  7.04s/it, failures=0, objective=0.805]     57%|█████▋    | 17/30 [02:08<01:24,  6.48s/it, failures=0, objective=0.805]     57%|█████▋    | 17/30 [02:08<01:24,  6.48s/it, failures=0, objective=0.805]     60%|██████    | 18/30 [02:10<01:03,  5.27s/it, failures=0, objective=0.805]     60%|██████    | 18/30 [02:10<01:03,  5.27s/it, failures=0, objective=0.805]     63%|██████▎   | 19/30 [02:16<00:59,  5.43s/it, failures=0, objective=0.805]     63%|██████▎   | 19/30 [02:16<00:59,  5.43s/it, failures=0, objective=0.805]     67%|██████▋   | 20/30 [02:23<00:58,  5.84s/it, failures=0, objective=0.805]     67%|██████▋   | 20/30 [02:23<00:58,  5.84s/it, failures=0, objective=0.805]     70%|███████   | 21/30 [02:28<00:50,  5.65s/it, failures=0, objective=0.805]     70%|███████   | 21/30 [02:28<00:50,  5.65s/it, failures=0, objective=0.805]     73%|███████▎  | 22/30 [02:33<00:44,  5.58s/it, failures=0, objective=0.805]     73%|███████▎  | 22/30 [02:33<00:44,  5.58s/it, failures=0, objective=0.805]     77%|███████▋  | 23/30 [02:39<00:40,  5.73s/it, failures=0, objective=0.805]     77%|███████▋  | 23/30 [02:39<00:40,  5.73s/it, failures=0, objective=0.805]     80%|████████  | 24/30 [03:01<01:03, 10.59s/it, failures=0, objective=0.805]     80%|████████  | 24/30 [03:01<01:03, 10.59s/it, failures=0, objective=0.814]     83%|████████▎ | 25/30 [03:27<01:15, 15.03s/it, failures=0, objective=0.814]     83%|████████▎ | 25/30 [03:27<01:15, 15.03s/it, failures=0, objective=0.814]     87%|████████▋ | 26/30 [03:50<01:09, 17.36s/it, failures=0, objective=0.814]     87%|████████▋ | 26/30 [03:50<01:09, 17.36s/it, failures=0, objective=0.814]     90%|█████████ | 27/30 [04:13<00:57, 19.06s/it, failures=0, objective=0.814]     90%|█████████ | 27/30 [04:13<00:57, 19.06s/it, failures=0, objective=0.814]     93%|█████████▎| 28/30 [04:31<00:37, 18.84s/it, failures=0, objective=0.814]     93%|█████████▎| 28/30 [04:31<00:37, 18.84s/it, failures=0, objective=0.814]     97%|█████████▋| 29/30 [05:12<00:25, 25.55s/it, failures=0, objective=0.814]     97%|█████████▋| 29/30 [05:12<00:25, 25.55s/it, failures=0, objective=0.814]    100%|██████████| 30/30 [05:32<00:00, 23.86s/it, failures=0, objective=0.814]    100%|██████████| 30/30 [05:32<00:00, 23.86s/it, failures=0, objective=0.814]



.. GENERATED FROM PYTHON SOURCE LINES 375-381

The returned :code:`results` is a Pandas Dataframe where columns are hyperparameters and information stored by the evaluator:

* :code:`job_id` is a unique identifier corresponding to the order of creation of tasks
* :code:`objective` is the value returned by the run-function
* :code:`timestamp_submit` is the time (in seconds) when the hyperparameter configuration was submitted by the :code:`Evaluator` relative to the creation of the evaluator.
* :code:`timestamp_gather` is the time (in seconds) when the hyperparameter configuration was collected by the :code:`Evaluator` relative to the creation of the evaluator.

.. GENERATED FROM PYTHON SOURCE LINES 383-385

.. code-block:: Python

    results






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>p:batch_size</th>
          <th>p:learning_rate</th>
          <th>p:num_epochs</th>
          <th>objective</th>
          <th>job_id</th>
          <th>job_status</th>
          <th>m:timestamp_submit</th>
          <th>m:timestamp_gather</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>218</td>
          <td>1.603682</td>
          <td>5</td>
          <td>0.356667</td>
          <td>0</td>
          <td>DONE</td>
          <td>1.201744</td>
          <td>10.083410</td>
        </tr>
        <tr>
          <th>1</th>
          <td>154</td>
          <td>0.105166</td>
          <td>16</td>
          <td>0.301429</td>
          <td>1</td>
          <td>DONE</td>
          <td>10.165432</td>
          <td>15.010249</td>
        </tr>
        <tr>
          <th>2</th>
          <td>200</td>
          <td>0.144150</td>
          <td>17</td>
          <td>0.294762</td>
          <td>2</td>
          <td>DONE</td>
          <td>15.043195</td>
          <td>19.502163</td>
        </tr>
        <tr>
          <th>3</th>
          <td>286</td>
          <td>3.508177</td>
          <td>15</td>
          <td>0.576190</td>
          <td>3</td>
          <td>DONE</td>
          <td>19.533200</td>
          <td>23.204575</td>
        </tr>
        <tr>
          <th>4</th>
          <td>10</td>
          <td>0.374523</td>
          <td>16</td>
          <td>0.586190</td>
          <td>4</td>
          <td>DONE</td>
          <td>23.234220</td>
          <td>58.793532</td>
        </tr>
        <tr>
          <th>5</th>
          <td>31</td>
          <td>0.165805</td>
          <td>16</td>
          <td>0.398095</td>
          <td>5</td>
          <td>DONE</td>
          <td>58.824440</td>
          <td>72.247476</td>
        </tr>
        <tr>
          <th>6</th>
          <td>356</td>
          <td>0.135121</td>
          <td>11</td>
          <td>0.265238</td>
          <td>6</td>
          <td>DONE</td>
          <td>72.277940</td>
          <td>75.083312</td>
        </tr>
        <tr>
          <th>7</th>
          <td>234</td>
          <td>0.219208</td>
          <td>15</td>
          <td>0.308095</td>
          <td>7</td>
          <td>DONE</td>
          <td>75.113756</td>
          <td>79.015994</td>
        </tr>
        <tr>
          <th>8</th>
          <td>239</td>
          <td>0.949777</td>
          <td>14</td>
          <td>0.439048</td>
          <td>8</td>
          <td>DONE</td>
          <td>79.045637</td>
          <td>82.634237</td>
        </tr>
        <tr>
          <th>9</th>
          <td>53</td>
          <td>3.226746</td>
          <td>14</td>
          <td>0.776190</td>
          <td>9</td>
          <td>DONE</td>
          <td>82.664993</td>
          <td>90.600132</td>
        </tr>
        <tr>
          <th>10</th>
          <td>42</td>
          <td>3.250431</td>
          <td>7</td>
          <td>0.664048</td>
          <td>10</td>
          <td>DONE</td>
          <td>90.804079</td>
          <td>96.020963</td>
        </tr>
        <tr>
          <th>11</th>
          <td>67</td>
          <td>2.493013</td>
          <td>14</td>
          <td>0.702143</td>
          <td>11</td>
          <td>DONE</td>
          <td>96.205311</td>
          <td>102.946039</td>
        </tr>
        <tr>
          <th>12</th>
          <td>52</td>
          <td>1.969489</td>
          <td>14</td>
          <td>0.706429</td>
          <td>12</td>
          <td>DONE</td>
          <td>103.129317</td>
          <td>111.346218</td>
        </tr>
        <tr>
          <th>13</th>
          <td>53</td>
          <td>5.363429</td>
          <td>16</td>
          <td>0.793810</td>
          <td>13</td>
          <td>DONE</td>
          <td>111.526737</td>
          <td>120.479798</td>
        </tr>
        <tr>
          <th>14</th>
          <td>96</td>
          <td>6.516995</td>
          <td>17</td>
          <td>0.796667</td>
          <td>14</td>
          <td>DONE</td>
          <td>120.659979</td>
          <td>127.026014</td>
        </tr>
        <tr>
          <th>15</th>
          <td>135</td>
          <td>6.515920</td>
          <td>19</td>
          <td>0.804762</td>
          <td>15</td>
          <td>DONE</td>
          <td>127.209640</td>
          <td>133.142229</td>
        </tr>
        <tr>
          <th>16</th>
          <td>223</td>
          <td>6.444707</td>
          <td>20</td>
          <td>0.737619</td>
          <td>16</td>
          <td>DONE</td>
          <td>133.326585</td>
          <td>138.320355</td>
        </tr>
        <tr>
          <th>17</th>
          <td>143</td>
          <td>8.122533</td>
          <td>5</td>
          <td>0.534286</td>
          <td>17</td>
          <td>DONE</td>
          <td>138.506371</td>
          <td>140.751131</td>
        </tr>
        <tr>
          <th>18</th>
          <td>137</td>
          <td>8.871360</td>
          <td>18</td>
          <td>0.766429</td>
          <td>18</td>
          <td>DONE</td>
          <td>140.939695</td>
          <td>146.575524</td>
        </tr>
        <tr>
          <th>19</th>
          <td>109</td>
          <td>4.227949</td>
          <td>19</td>
          <td>0.780952</td>
          <td>19</td>
          <td>DONE</td>
          <td>146.764230</td>
          <td>153.347868</td>
        </tr>
        <tr>
          <th>20</th>
          <td>123</td>
          <td>5.800259</td>
          <td>15</td>
          <td>0.755000</td>
          <td>20</td>
          <td>DONE</td>
          <td>153.535532</td>
          <td>158.566730</td>
        </tr>
        <tr>
          <th>21</th>
          <td>164</td>
          <td>5.829206</td>
          <td>19</td>
          <td>0.762143</td>
          <td>21</td>
          <td>DONE</td>
          <td>158.759242</td>
          <td>163.985452</td>
        </tr>
        <tr>
          <th>22</th>
          <td>135</td>
          <td>3.215795</td>
          <td>19</td>
          <td>0.731667</td>
          <td>22</td>
          <td>DONE</td>
          <td>164.173174</td>
          <td>170.059973</td>
        </tr>
        <tr>
          <th>23</th>
          <td>22</td>
          <td>6.480428</td>
          <td>19</td>
          <td>0.814286</td>
          <td>23</td>
          <td>DONE</td>
          <td>170.249493</td>
          <td>192.001965</td>
        </tr>
        <tr>
          <th>24</th>
          <td>17</td>
          <td>3.658221</td>
          <td>18</td>
          <td>0.804048</td>
          <td>24</td>
          <td>DONE</td>
          <td>192.192851</td>
          <td>217.386762</td>
        </tr>
        <tr>
          <th>25</th>
          <td>20</td>
          <td>2.774962</td>
          <td>19</td>
          <td>0.808810</td>
          <td>25</td>
          <td>DONE</td>
          <td>217.577718</td>
          <td>240.172801</td>
        </tr>
        <tr>
          <th>26</th>
          <td>20</td>
          <td>1.502854</td>
          <td>19</td>
          <td>0.781429</td>
          <td>26</td>
          <td>DONE</td>
          <td>240.363467</td>
          <td>263.214262</td>
        </tr>
        <tr>
          <th>27</th>
          <td>28</td>
          <td>3.161690</td>
          <td>19</td>
          <td>0.802143</td>
          <td>27</td>
          <td>DONE</td>
          <td>263.547650</td>
          <td>281.546914</td>
        </tr>
        <tr>
          <th>28</th>
          <td>11</td>
          <td>8.864483</td>
          <td>20</td>
          <td>0.802381</td>
          <td>28</td>
          <td>DONE</td>
          <td>281.738626</td>
          <td>322.728173</td>
        </tr>
        <tr>
          <th>29</th>
          <td>21</td>
          <td>4.391751</td>
          <td>17</td>
          <td>0.807143</td>
          <td>29</td>
          <td>DONE</td>
          <td>322.925621</td>
          <td>342.655973</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 386-390

Evaluate the best configuration
-------------------------------

Now that the search is over, let us print the best configuration found during this run and evaluate it on the full training dataset.

.. GENERATED FROM PYTHON SOURCE LINES 392-402

.. code-block:: Python

    i_max = results.objective.argmax()
    best_config = results.iloc[i_max][:-3].to_dict()
    best_config = {k[2:]: v for k, v in best_config.items() if k.startswith("p:")}

    print(f"The default configuration has an accuracy of {objective_default:.3f}. \n" 
          f"The best configuration found by DeepHyper has an accuracy {results['objective'].iloc[i_max]:.3f}, \n" 
          f"finished after {results['m:timestamp_gather'].iloc[i_max]:.2f} secondes of search.\n")

    print(json.dumps(best_config, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The default configuration has an accuracy of 0.867. 
    The best configuration found by DeepHyper has an accuracy 0.814, 
    finished after 192.00 secondes of search.

    {
        "batch_size": 22,
        "learning_rate": 6.480428119634669,
        "num_epochs": 19
    }




.. GENERATED FROM PYTHON SOURCE LINES 403-404

.. code-block:: Python

    objective_best = perf_run(best_config)
    print(f"Accuracy Best Configuration:  {objective_best:.3f}")



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy Best Configuration:  0.903





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (7 minutes 12.166 seconds)


.. _sphx_glr_download_examples_examples_hpo_plot_hpo_text_classification.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_hpo_text_classification.ipynb <plot_hpo_text_classification.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_hpo_text_classification.py <plot_hpo_text_classification.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_hpo_text_classification.zip <plot_hpo_text_classification.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
