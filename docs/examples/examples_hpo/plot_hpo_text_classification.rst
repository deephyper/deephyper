
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/examples_hpo/plot_hpo_text_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_examples_hpo_plot_hpo_text_classification.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_examples_hpo_plot_hpo_text_classification.py:


Hyperparameter search for text classification
=============================================

**Author(s)**: Romain Egele, Brett Eiffert.

 
In this tutorial we present how to use hyperparameter optimization on a text classification analysis example from the Pytorch documentation.
 
**Reference**:
This tutorial is based on materials from the Pytorch Documentation: `Text classification with the torchtext library <https://pytorch.org/tutorials/beginner/text_sentiment_ngrams_tutorial.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: bash

    %%bash
    pip install deephyper
    pip install ray
    pip install torch torchtext torchdata

.. GENERATED FROM PYTHON SOURCE LINES 24-28

Imports
-------

All imports used in the tutorial are declared at the top of the file.

.. GENERATED FROM PYTHON SOURCE LINES 28-47

.. dropdown:: Code (Imports)

    .. code-block:: Python


        import ray
        import json
        import pandas as pd
        from functools import partial

        import torch

        from torchtext.data.utils import get_tokenizer
        from torchtext.data.functional import to_map_style_dataset
        from torchtext.vocab import build_vocab_from_iterator
        from torchtext.datasets import AG_NEWS

        from torch.utils.data import DataLoader
        from torch.utils.data.dataset import random_split

        from torch import nn








.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. note::
  The following can be used to detect if **CUDA** devices are available on the current host. Therefore, this notebook will automatically adapt the parallel execution based on the ressources available locally. However, it will not be the case if many compute nodes are requested.


.. GENERATED FROM PYTHON SOURCE LINES 53-54

If GPU is available, this code will enabled the tutorial to use the GPU for pytorch operations.

.. GENERATED FROM PYTHON SOURCE LINES 55-60

.. dropdown:: Code (Code to check if using CPU or GPU)

    .. code-block:: Python


        is_gpu_available = torch.cuda.is_available()
        n_gpus = torch.cuda.device_count()








.. GENERATED FROM PYTHON SOURCE LINES 61-66

The dataset
-----------

The torchtext library provides a few raw dataset iterators, which yield the raw text strings. For example, the :code:`AG_NEWS` dataset iterators yield the raw data as a tuple of label and text. It has four labels (1 : World 2 : Sports 3 : Business 4 : Sci/Tec).


.. GENERATED FROM PYTHON SOURCE LINES 66-84

.. dropdown:: Code (Loading the data)

    .. code-block:: Python


        def load_data(train_ratio, fast=False):
            train_iter, test_iter = AG_NEWS()
            train_dataset = to_map_style_dataset(train_iter)
            test_dataset = to_map_style_dataset(test_iter)
            num_train = int(len(train_dataset) * train_ratio)
            split_train, split_valid = \
                random_split(train_dataset, [num_train, len(train_dataset) - num_train])
    
            ## downsample
            if fast:
                split_train, _ = random_split(split_train, [int(len(split_train)*.05), int(len(split_train)*.95)])
                split_valid, _ = random_split(split_valid, [int(len(split_valid)*.05), int(len(split_valid)*.95)])
                test_dataset, _ = random_split(test_dataset, [int(len(test_dataset)*.05), int(len(test_dataset)*.95)])

            return split_train, split_valid, test_dataset








.. GENERATED FROM PYTHON SOURCE LINES 85-93

Preprocessing pipelines and Batch generation
--------------------------------------------

Here is an example for typical NLP data processing with tokenizer and vocabulary. The first step is to build a vocabulary with the raw training dataset. Here we use built in
factory function :code:`build_vocab_from_iterator` which accepts iterator that yield list or iterator of tokens. Users can also pass any special symbols to be added to the
vocabulary.

The vocabulary block converts a list of tokens into integers.

.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: python

  vocab(['here', 'is', 'an', 'example'])
  >>> [475, 21, 30, 5286]

.. GENERATED FROM PYTHON SOURCE LINES 101-102

The text pipeline converts a text string into a list of integers based on the lookup table defined in the vocabulary. The label pipeline converts the label into integers. For example,

.. GENERATED FROM PYTHON SOURCE LINES 104-110

.. code-block:: python

  text_pipeline('here is the an example')
  >>> [475, 21, 2, 30, 5286]
  label_pipeline('10')
  >>> 9 

.. GENERATED FROM PYTHON SOURCE LINES 110-141

.. dropdown:: Code (Code to tokenize and build vocabulary for text processing)

    .. code-block:: Python


        train_iter = AG_NEWS(split='train')
        num_class = 4

        tokenizer = get_tokenizer('basic_english')

        def yield_tokens(data_iter):
            for _, text in data_iter:
                yield tokenizer(text)

        vocab = build_vocab_from_iterator(yield_tokens(train_iter), specials=["<unk>"])
        vocab.set_default_index(vocab["<unk>"])
        vocab_size = len(vocab)

        text_pipeline = lambda x: vocab(tokenizer(x))
        label_pipeline = lambda x: int(x) - 1


        def collate_batch(batch, device):
            label_list, text_list, offsets = [], [], [0]
            for (_label, _text) in batch:
                label_list.append(label_pipeline(_label))
                processed_text = torch.tensor(text_pipeline(_text), dtype=torch.int64)
                text_list.append(processed_text)
                offsets.append(processed_text.size(0))
            label_list = torch.tensor(label_list, dtype=torch.int64)
            offsets = torch.tensor(offsets[:-1]).cumsum(dim=0)
            text_list = torch.cat(text_list)
            return label_list.to(device), text_list.to(device), offsets.to(device)








.. GENERATED FROM PYTHON SOURCE LINES 142-144

.. note:: The :code:`collate_fn` function works on a batch of samples generated from :code:`DataLoader`. The input to :code:`collate_fn` is a batch of data with the batch size in :code:`DataLoader`, and :code:`collate_fn` processes them according to the data processing pipelines declared previously.


.. GENERATED FROM PYTHON SOURCE LINES 146-150

Define the model
----------------

The model is composed of the `nn.EmbeddingBag <https://pytorch.org/docs/stable/nn.html?highlight=embeddingbag#torch.nn.EmbeddingBag>`_ layer plus a linear layer for the classification purpose.

.. GENERATED FROM PYTHON SOURCE LINES 150-170

.. dropdown:: Code (Defining the Text Classification model)

    .. code-block:: Python


        class TextClassificationModel(nn.Module):

            def __init__(self, vocab_size, embed_dim, num_class):
                super(TextClassificationModel, self).__init__()
                self.embedding = nn.EmbeddingBag(vocab_size, embed_dim, sparse=False)
                self.fc = nn.Linear(embed_dim, num_class)
                self.init_weights()

            def init_weights(self):
                initrange = 0.5
                self.embedding.weight.data.uniform_(-initrange, initrange)
                self.fc.weight.data.uniform_(-initrange, initrange)
                self.fc.bias.data.zero_()

            def forward(self, text, offsets):
                embedded = self.embedding(text, offsets)
                return self.fc(embedded)








.. GENERATED FROM PYTHON SOURCE LINES 171-173

Define functions to train the model and evaluate results.
---------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 173-197

.. dropdown:: Code (Define the training and evaluation of the Text Classification model)

    .. code-block:: Python


        def train(model, criterion, optimizer, dataloader):
            model.train()

            for _, (label, text, offsets) in enumerate(dataloader):
                optimizer.zero_grad()
                predicted_label = model(text, offsets)
                loss = criterion(predicted_label, label)
                loss.backward()
                torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1)
                optimizer.step()

        def evaluate(model, dataloader):
            model.eval()
            total_acc, total_count = 0, 0

            with torch.no_grad():
                for _, (label, text, offsets) in enumerate(dataloader):
                    predicted_label = model(text, offsets)
                    total_acc += (predicted_label.argmax(1) == label).sum().item()
                    total_count += label.size(0)
            return total_acc/total_count








.. GENERATED FROM PYTHON SOURCE LINES 198-208

Define the run-function
-----------------------

The run-function defines how the objective that we want to maximize is computed. It takes a :code:`config` dictionary as input and often returns a scalar value that we want to maximize. The :code:`config` contains a sample value of hyperparameters that we want to tune. In this example we will search for:

* :code:`num_epochs` (default value: :code:`10`)
* :code:`batch_size` (default value: :code:`64`)
* :code:`learning_rate` (default value: :code:`5`)

A hyperparameter value can be acessed easily in the dictionary through the corresponding key, for example :code:`config["units"]`.

.. GENERATED FROM PYTHON SOURCE LINES 208-235

.. dropdown:: Code (Run the Text Classification model)

    .. code-block:: Python


        def get_run(train_ratio=0.95):
          def run(config: dict):
            device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

            embed_dim = 64
    
            collate_fn = partial(collate_batch, device=device)
            split_train, split_valid, _ = load_data(train_ratio, fast=True) # set fast=false for longer running, more accurate example
            train_dataloader = DataLoader(split_train, batch_size=int(config["batch_size"]),
                                        shuffle=True, collate_fn=collate_fn)
            valid_dataloader = DataLoader(split_valid, batch_size=int(config["batch_size"]),
                                        shuffle=True, collate_fn=collate_fn)

            model = TextClassificationModel(vocab_size, int(embed_dim), num_class).to(device)
      
            criterion = torch.nn.CrossEntropyLoss()
            optimizer = torch.optim.SGD(model.parameters(), lr=config["learning_rate"])

            for _ in range(1, int(config["num_epochs"]) + 1):
                train(model, criterion, optimizer, train_dataloader)
    
            accu_test = evaluate(model, valid_dataloader)
            return accu_test
          return run








.. GENERATED FROM PYTHON SOURCE LINES 236-237

We create two versions of :code:`run`, one quicker to evaluate for the search, with a small training dataset, and another one, for performance evaluation, which uses a normal training/validation ratio.

.. GENERATED FROM PYTHON SOURCE LINES 239-242

.. code-block:: Python

    quick_run = get_run(train_ratio=0.3)
    perf_run = get_run(train_ratio=0.95)








.. GENERATED FROM PYTHON SOURCE LINES 243-246

.. note:: The objective maximised by DeepHyper is the scalar value returned by the :code:`run`-function.

In this tutorial it corresponds to the validation accuracy of the model after training.

.. GENERATED FROM PYTHON SOURCE LINES 248-258

Define the Hyperparameter optimization problem
---------------------------------------------- 

Hyperparameter ranges are defined using the following syntax:

* Discrete integer ranges are generated from a tuple :code:`(lower: int, upper: int)`
* Continuous prarameters are generated from a tuple :code:`(lower: float, upper: float)`
* Categorical or nonordinal hyperparameter ranges can be given as a list of possible values :code:`[val1, val2, ...]`

We provide the default configuration of hyperparameters as a starting point of the problem.

.. GENERATED FROM PYTHON SOURCE LINES 260-273

.. code-block:: Python

    from deephyper.hpo import HpProblem

    problem = HpProblem()

    # Discrete hyperparameter (sampled with uniform prior)
    problem.add_hyperparameter((5, 20), "num_epochs", default_value=10)

    # Discrete and Real hyperparameters (sampled with log-uniform)
    problem.add_hyperparameter((8, 512, "log-uniform"), "batch_size", default_value=64)
    problem.add_hyperparameter((0.1, 10, "log-uniform"), "learning_rate", default_value=5)

    problem





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        batch_size, Type: UniformInteger, Range: [8, 512], Default: 64, on log-scale
        learning_rate, Type: UniformFloat, Range: [0.1, 10.0], Default: 5.0, on log-scale
        num_epochs, Type: UniformInteger, Range: [5, 20], Default: 10




.. GENERATED FROM PYTHON SOURCE LINES 274-278

Evaluate a default configuration
--------------------------------

We evaluate the performance of the default set of hyperparameters provided in the Pytorch tutorial.

.. GENERATED FROM PYTHON SOURCE LINES 278-295

.. code-block:: Python


    #We launch the Ray run-time and execute the `run` function
    #with the default configuration
    if is_gpu_available:
        if not(ray.is_initialized()):
            ray.init(num_cpus=n_gpus, num_gpus=n_gpus, log_to_driver=False)
    
        run_default = ray.remote(num_cpus=1, num_gpus=1)(perf_run)
        objective_default = ray.get(run_default.remote(problem.default_configuration))
    else:
        if not(ray.is_initialized()):
            ray.init(num_cpus=1, log_to_driver=False)
        run_default = perf_run
        objective_default = run_default(problem.default_configuration)

    print(f"Accuracy Default Configuration:  {objective_default:.3f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-04-04 15:03:55,970 INFO worker.py:1852 -- Started a local Ray instance.
    Accuracy Default Configuration:  0.863




.. GENERATED FROM PYTHON SOURCE LINES 296-302

Define the evaluator object
---------------------------

The :code:`Evaluator` object allows to change the parallelization backend used by DeepHyper.  
It is a standalone object which schedules the execution of remote tasks. All evaluators needs a :code:`run_function` to be instantiated.  
Then a keyword :code:`method` defines the backend (e.g., :code:`"ray"`) and the :code:`method_kwargs` corresponds to keyword arguments of this chosen :code:`method`.

.. GENERATED FROM PYTHON SOURCE LINES 304-307

.. code-block:: python

  evaluator = Evaluator.create(run_function, method, method_kwargs)

.. GENERATED FROM PYTHON SOURCE LINES 309-312

Once created the :code:`evaluator.num_workers` gives access to the number of available parallel workers.

Finally, to submit and collect tasks to the evaluator one just needs to use the following interface:

.. GENERATED FROM PYTHON SOURCE LINES 314-321

.. code-block:: python

 	configs = [...]
 	evaluator.submit(configs)
	...
	tasks_done = evaluator.get("BATCH", size=1) # For asynchronous
	tasks_done = evaluator.get("ALL") # For batch synchronous

.. GENERATED FROM PYTHON SOURCE LINES 323-324

.. warning:: Each `Evaluator` saves its own state, therefore it is crucial to create a new evaluator when launching a fresh search.

.. GENERATED FROM PYTHON SOURCE LINES 326-356

.. code-block:: Python

    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback

    def get_evaluator(run_function):
        # Default arguments for Ray: 1 worker and 1 worker per evaluation
        method_kwargs = {
            "num_cpus": 1, 
            "num_cpus_per_task": 1,
            "callbacks": [TqdmCallback()]
        }

        # If GPU devices are detected then it will create 'n_gpus' workers
        # and use 1 worker for each evaluation
        if is_gpu_available:
            method_kwargs["num_cpus"] = n_gpus
            method_kwargs["num_gpus"] = n_gpus
            method_kwargs["num_cpus_per_task"] = 1
            method_kwargs["num_gpus_per_task"] = 1

        evaluator = Evaluator.create(
            run_function, 
            method="ray", 
            method_kwargs=method_kwargs
        )
        print(f"Created new evaluator with {evaluator.num_workers} worker{'s' if evaluator.num_workers > 1 else ''} and config: {method_kwargs}", )
    
        return evaluator

    evaluator_1 = get_evaluator(quick_run)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Created new evaluator with 1 worker and config: {'num_cpus': 1, 'num_cpus_per_task': 1, 'callbacks': [<deephyper.evaluator.callback.TqdmCallback object at 0x12f1160f0>]}




.. GENERATED FROM PYTHON SOURCE LINES 357-361

Define and run the Centralized Bayesian Optimization search (CBO)
-----------------------------------------------------------------

We create the CBO using the :code:`problem` and :code:`evaluator` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 363-365

.. code-block:: Python

    from deephyper.hpo import CBO








.. GENERATED FROM PYTHON SOURCE LINES 366-367

Instanciate the search with the problem and a specific evaluator

.. GENERATED FROM PYTHON SOURCE LINES 367-369

.. code-block:: Python

    search = CBO(problem, evaluator_1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    WARNING:root:Results file already exists, it will be renamed to /Users/35e/Projects/DeepHyper/deephyper/examples/examples_hpo/results_20250404-150417.csv




.. GENERATED FROM PYTHON SOURCE LINES 370-375

.. note:: 
  All DeepHyper's search algorithm have two stopping criteria:
      * :code:`max_evals (int)`: Defines the maximum number of evaluations that we want to perform. Default to :code:`-1` for an infinite number.
      * :code:`timeout (int)`: Defines a time budget (in seconds) before stopping the search. Default to :code:`None` for an infinite time budget.


.. GENERATED FROM PYTHON SOURCE LINES 377-379

.. code-block:: Python

    results = search.search(max_evals=30)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/30 [00:00<?, ?it/s]      3%|▎         | 1/30 [00:00<00:00, 2391.28it/s, failures=0, objective=0.812]      7%|▋         | 2/30 [00:02<00:39,  1.41s/it, failures=0, objective=0.812]        7%|▋         | 2/30 [00:02<00:39,  1.41s/it, failures=0, objective=0.812]     10%|█         | 3/30 [00:08<01:23,  3.08s/it, failures=0, objective=0.812]     10%|█         | 3/30 [00:08<01:23,  3.08s/it, failures=0, objective=0.812]     13%|█▎        | 4/30 [00:20<02:44,  6.34s/it, failures=0, objective=0.812]     13%|█▎        | 4/30 [00:20<02:44,  6.34s/it, failures=0, objective=0.812]     17%|█▋        | 5/30 [00:30<03:13,  7.73s/it, failures=0, objective=0.812]     17%|█▋        | 5/30 [00:30<03:13,  7.73s/it, failures=0, objective=0.812]     20%|██        | 6/30 [00:42<03:42,  9.29s/it, failures=0, objective=0.812]     20%|██        | 6/30 [00:42<03:42,  9.29s/it, failures=0, objective=0.812]     23%|██▎       | 7/30 [00:46<02:54,  7.57s/it, failures=0, objective=0.812]     23%|██▎       | 7/30 [00:46<02:54,  7.57s/it, failures=0, objective=0.812]     27%|██▋       | 8/30 [01:17<05:28, 14.93s/it, failures=0, objective=0.812]     27%|██▋       | 8/30 [01:17<05:28, 14.93s/it, failures=0, objective=0.812]     30%|███       | 9/30 [01:22<04:09, 11.87s/it, failures=0, objective=0.812]     30%|███       | 9/30 [01:22<04:09, 11.87s/it, failures=0, objective=0.812]     33%|███▎      | 10/30 [01:29<03:23, 10.16s/it, failures=0, objective=0.812]     33%|███▎      | 10/30 [01:29<03:23, 10.16s/it, failures=0, objective=0.812]     37%|███▋      | 11/30 [01:32<02:33,  8.05s/it, failures=0, objective=0.812]     37%|███▋      | 11/30 [01:32<02:33,  8.05s/it, failures=0, objective=0.812]     40%|████      | 12/30 [01:47<03:04, 10.26s/it, failures=0, objective=0.812]     40%|████      | 12/30 [01:47<03:04, 10.26s/it, failures=0, objective=0.812]     43%|████▎     | 13/30 [02:27<05:27, 19.24s/it, failures=0, objective=0.812]     43%|████▎     | 13/30 [02:27<05:27, 19.24s/it, failures=0, objective=0.819]     47%|████▋     | 14/30 [03:02<06:21, 23.81s/it, failures=0, objective=0.819]     47%|████▋     | 14/30 [03:02<06:21, 23.81s/it, failures=0, objective=0.819]     50%|█████     | 15/30 [03:42<07:12, 28.84s/it, failures=0, objective=0.819]     50%|█████     | 15/30 [03:42<07:12, 28.84s/it, failures=0, objective=0.822]     53%|█████▎    | 16/30 [04:04<06:13, 26.71s/it, failures=0, objective=0.822]     53%|█████▎    | 16/30 [04:04<06:13, 26.71s/it, failures=0, objective=0.822]     57%|█████▋    | 17/30 [04:33<05:58, 27.59s/it, failures=0, objective=0.822]     57%|█████▋    | 17/30 [04:33<05:58, 27.59s/it, failures=0, objective=0.822]     60%|██████    | 18/30 [05:39<07:46, 38.85s/it, failures=0, objective=0.822]     60%|██████    | 18/30 [05:39<07:46, 38.85s/it, failures=0, objective=0.822]     63%|██████▎   | 19/30 [06:16<07:01, 38.35s/it, failures=0, objective=0.822]     63%|██████▎   | 19/30 [06:16<07:01, 38.35s/it, failures=0, objective=0.822]     67%|██████▋   | 20/30 [06:49<06:08, 36.83s/it, failures=0, objective=0.822]     67%|██████▋   | 20/30 [06:49<06:08, 36.83s/it, failures=0, objective=0.822]     70%|███████   | 21/30 [07:06<04:36, 30.75s/it, failures=0, objective=0.822]     70%|███████   | 21/30 [07:06<04:36, 30.75s/it, failures=0, objective=0.822]     73%|███████▎  | 22/30 [07:13<03:10, 23.85s/it, failures=0, objective=0.822]     73%|███████▎  | 22/30 [07:13<03:10, 23.85s/it, failures=0, objective=0.822]     77%|███████▋  | 23/30 [07:46<03:05, 26.52s/it, failures=0, objective=0.822]     77%|███████▋  | 23/30 [07:46<03:05, 26.52s/it, failures=0, objective=0.822]     80%|████████  | 24/30 [08:12<02:38, 26.45s/it, failures=0, objective=0.822]     80%|████████  | 24/30 [08:12<02:38, 26.45s/it, failures=0, objective=0.822]     83%|████████▎ | 25/30 [09:05<02:50, 34.17s/it, failures=0, objective=0.822]     83%|████████▎ | 25/30 [09:05<02:50, 34.17s/it, failures=0, objective=0.822]     87%|████████▋ | 26/30 [09:39<02:17, 34.40s/it, failures=0, objective=0.822]     87%|████████▋ | 26/30 [09:39<02:17, 34.40s/it, failures=0, objective=0.822]     90%|█████████ | 27/30 [10:28<01:56, 38.71s/it, failures=0, objective=0.822]     90%|█████████ | 27/30 [10:28<01:56, 38.71s/it, failures=0, objective=0.822]     93%|█████████▎| 28/30 [11:14<01:21, 40.75s/it, failures=0, objective=0.822]     93%|█████████▎| 28/30 [11:14<01:21, 40.75s/it, failures=0, objective=0.822]     97%|█████████▋| 29/30 [11:24<00:31, 31.57s/it, failures=0, objective=0.822]     97%|█████████▋| 29/30 [11:24<00:31, 31.57s/it, failures=0, objective=0.822]    100%|██████████| 30/30 [11:30<00:00, 24.08s/it, failures=0, objective=0.822]    100%|██████████| 30/30 [11:30<00:00, 24.08s/it, failures=0, objective=0.822]    100%|██████████| 30/30 [11:30<00:00, 23.03s/it, failures=0, objective=0.822]




.. GENERATED FROM PYTHON SOURCE LINES 380-386

The returned :code:`results` is a Pandas Dataframe where columns are hyperparameters and information stored by the evaluator:

* :code:`job_id` is a unique identifier corresponding to the order of creation of tasks
* :code:`objective` is the value returned by the run-function
* :code:`timestamp_submit` is the time (in seconds) when the hyperparameter configuration was submitted by the :code:`Evaluator` relative to the creation of the evaluator.
* :code:`timestamp_gather` is the time (in seconds) when the hyperparameter configuration was collected by the :code:`Evaluator` relative to the creation of the evaluator.

.. GENERATED FROM PYTHON SOURCE LINES 388-390

.. code-block:: Python

    results






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>p:batch_size</th>
          <th>p:learning_rate</th>
          <th>p:num_epochs</th>
          <th>objective</th>
          <th>job_id</th>
          <th>job_status</th>
          <th>m:timestamp_submit</th>
          <th>m:timestamp_gather</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>9</td>
          <td>7.425425</td>
          <td>15</td>
          <td>0.812143</td>
          <td>0</td>
          <td>DONE</td>
          <td>2.604801</td>
          <td>46.987732</td>
        </tr>
        <tr>
          <th>1</th>
          <td>452</td>
          <td>1.145549</td>
          <td>12</td>
          <td>0.380000</td>
          <td>1</td>
          <td>DONE</td>
          <td>47.059917</td>
          <td>49.822526</td>
        </tr>
        <tr>
          <th>2</th>
          <td>57</td>
          <td>0.383452</td>
          <td>9</td>
          <td>0.419048</td>
          <td>2</td>
          <td>DONE</td>
          <td>49.857259</td>
          <td>55.230967</td>
        </tr>
        <tr>
          <th>3</th>
          <td>15</td>
          <td>5.642948</td>
          <td>7</td>
          <td>0.805714</td>
          <td>3</td>
          <td>DONE</td>
          <td>55.263904</td>
          <td>67.059916</td>
        </tr>
        <tr>
          <th>4</th>
          <td>38</td>
          <td>0.200370</td>
          <td>14</td>
          <td>0.405714</td>
          <td>4</td>
          <td>DONE</td>
          <td>67.092526</td>
          <td>77.403794</td>
        </tr>
        <tr>
          <th>5</th>
          <td>40</td>
          <td>3.867938</td>
          <td>18</td>
          <td>0.800476</td>
          <td>5</td>
          <td>DONE</td>
          <td>77.434969</td>
          <td>89.825199</td>
        </tr>
        <tr>
          <th>6</th>
          <td>268</td>
          <td>2.038292</td>
          <td>16</td>
          <td>0.527857</td>
          <td>6</td>
          <td>DONE</td>
          <td>89.855504</td>
          <td>93.771533</td>
        </tr>
        <tr>
          <th>7</th>
          <td>9</td>
          <td>9.626926</td>
          <td>12</td>
          <td>0.807143</td>
          <td>7</td>
          <td>DONE</td>
          <td>94.552353</td>
          <td>124.719900</td>
        </tr>
        <tr>
          <th>8</th>
          <td>37</td>
          <td>2.895236</td>
          <td>5</td>
          <td>0.620476</td>
          <td>8</td>
          <td>DONE</td>
          <td>125.383406</td>
          <td>129.799785</td>
        </tr>
        <tr>
          <th>9</th>
          <td>153</td>
          <td>7.178963</td>
          <td>19</td>
          <td>0.797143</td>
          <td>9</td>
          <td>DONE</td>
          <td>130.489276</td>
          <td>136.089723</td>
        </tr>
        <tr>
          <th>10</th>
          <td>244</td>
          <td>8.542534</td>
          <td>8</td>
          <td>0.544286</td>
          <td>10</td>
          <td>DONE</td>
          <td>136.765761</td>
          <td>139.339588</td>
        </tr>
        <tr>
          <th>11</th>
          <td>19</td>
          <td>3.968249</td>
          <td>11</td>
          <td>0.795000</td>
          <td>11</td>
          <td>DONE</td>
          <td>140.250239</td>
          <td>154.656680</td>
        </tr>
        <tr>
          <th>12</th>
          <td>8</td>
          <td>7.385292</td>
          <td>14</td>
          <td>0.818571</td>
          <td>12</td>
          <td>DONE</td>
          <td>155.356481</td>
          <td>194.618774</td>
        </tr>
        <tr>
          <th>13</th>
          <td>8</td>
          <td>4.465524</td>
          <td>12</td>
          <td>0.815714</td>
          <td>13</td>
          <td>DONE</td>
          <td>195.311674</td>
          <td>229.019057</td>
        </tr>
        <tr>
          <th>14</th>
          <td>9</td>
          <td>6.083976</td>
          <td>16</td>
          <td>0.822143</td>
          <td>14</td>
          <td>DONE</td>
          <td>229.714876</td>
          <td>269.514743</td>
        </tr>
        <tr>
          <th>15</th>
          <td>9</td>
          <td>5.053471</td>
          <td>8</td>
          <td>0.807619</td>
          <td>15</td>
          <td>DONE</td>
          <td>270.209680</td>
          <td>291.281826</td>
        </tr>
        <tr>
          <th>16</th>
          <td>8</td>
          <td>6.475469</td>
          <td>10</td>
          <td>0.818333</td>
          <td>16</td>
          <td>DONE</td>
          <td>291.968086</td>
          <td>320.907829</td>
        </tr>
        <tr>
          <th>17</th>
          <td>8</td>
          <td>7.484417</td>
          <td>20</td>
          <td>0.810238</td>
          <td>17</td>
          <td>DONE</td>
          <td>321.689849</td>
          <td>386.003532</td>
        </tr>
        <tr>
          <th>18</th>
          <td>9</td>
          <td>1.744984</td>
          <td>13</td>
          <td>0.776905</td>
          <td>18</td>
          <td>DONE</td>
          <td>386.968047</td>
          <td>423.184486</td>
        </tr>
        <tr>
          <th>19</th>
          <td>14</td>
          <td>1.153448</td>
          <td>18</td>
          <td>0.767143</td>
          <td>19</td>
          <td>DONE</td>
          <td>423.919372</td>
          <td>456.463661</td>
        </tr>
        <tr>
          <th>20</th>
          <td>15</td>
          <td>1.065215</td>
          <td>9</td>
          <td>0.625476</td>
          <td>20</td>
          <td>DONE</td>
          <td>457.148631</td>
          <td>473.035276</td>
        </tr>
        <tr>
          <th>21</th>
          <td>127</td>
          <td>8.755717</td>
          <td>20</td>
          <td>0.805952</td>
          <td>21</td>
          <td>DONE</td>
          <td>473.893791</td>
          <td>480.795972</td>
        </tr>
        <tr>
          <th>22</th>
          <td>10</td>
          <td>8.288423</td>
          <td>12</td>
          <td>0.820000</td>
          <td>22</td>
          <td>DONE</td>
          <td>481.636946</td>
          <td>513.528365</td>
        </tr>
        <tr>
          <th>23</th>
          <td>10</td>
          <td>5.977716</td>
          <td>11</td>
          <td>0.816905</td>
          <td>23</td>
          <td>DONE</td>
          <td>514.225128</td>
          <td>539.820897</td>
        </tr>
        <tr>
          <th>24</th>
          <td>9</td>
          <td>4.320941</td>
          <td>18</td>
          <td>0.806905</td>
          <td>24</td>
          <td>DONE</td>
          <td>541.150857</td>
          <td>592.006657</td>
        </tr>
        <tr>
          <th>25</th>
          <td>11</td>
          <td>8.315465</td>
          <td>15</td>
          <td>0.815238</td>
          <td>25</td>
          <td>DONE</td>
          <td>593.012866</td>
          <td>626.937860</td>
        </tr>
        <tr>
          <th>26</th>
          <td>10</td>
          <td>6.658980</td>
          <td>20</td>
          <td>0.813810</td>
          <td>26</td>
          <td>DONE</td>
          <td>627.698929</td>
          <td>675.699136</td>
        </tr>
        <tr>
          <th>27</th>
          <td>8</td>
          <td>4.454033</td>
          <td>15</td>
          <td>0.807381</td>
          <td>27</td>
          <td>DONE</td>
          <td>676.438800</td>
          <td>721.224411</td>
        </tr>
        <tr>
          <th>28</th>
          <td>15</td>
          <td>7.719777</td>
          <td>5</td>
          <td>0.783095</td>
          <td>28</td>
          <td>DONE</td>
          <td>721.985601</td>
          <td>731.361303</td>
        </tr>
        <tr>
          <th>29</th>
          <td>131</td>
          <td>3.920481</td>
          <td>17</td>
          <td>0.740238</td>
          <td>29</td>
          <td>DONE</td>
          <td>732.134989</td>
          <td>737.962880</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 391-395

Evaluate the best configuration
-------------------------------

Now that the search is over, let us print the best configuration found during this run and evaluate it on the full training dataset.

.. GENERATED FROM PYTHON SOURCE LINES 397-407

.. code-block:: Python

    i_max = results.objective.argmax()
    best_config = results.iloc[i_max][:-3].to_dict()
    best_config = {k[2:]: v for k, v in best_config.items() if k.startswith("p:")}

    print(f"The default configuration has an accuracy of {objective_default:.3f}. \n" 
          f"The best configuration found by DeepHyper has an accuracy {results['objective'].iloc[i_max]:.3f}, \n" 
          f"finished after {results['m:timestamp_gather'].iloc[i_max]:.2f} secondes of search.\n")

    print(json.dumps(best_config, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The default configuration has an accuracy of 0.863. 
    The best configuration found by DeepHyper has an accuracy 0.822, 
    finished after 269.51 secondes of search.

    {
        "batch_size": 9,
        "learning_rate": 6.083975570398782,
        "num_epochs": 16
    }




.. GENERATED FROM PYTHON SOURCE LINES 408-410

.. code-block:: Python

    objective_best = perf_run(best_config)
    print(f"Accuracy Best Configuration:  {objective_best:.3f}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy Best Configuration:  0.850





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (14 minutes 59.752 seconds)


.. _sphx_glr_download_examples_examples_hpo_plot_hpo_text_classification.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_hpo_text_classification.ipynb <plot_hpo_text_classification.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_hpo_text_classification.py <plot_hpo_text_classification.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_hpo_text_classification.zip <plot_hpo_text_classification.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
