
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/examples_bbo/plot_black_box_optimization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_examples_bbo_plot_black_box_optimization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_examples_bbo_plot_black_box_optimization.py:


Black-Box Optimization
======================

**Author(s)**: Romain Egele, Brett Eiffert.

In this tutorial, we introduce you to the notion of `black-box optimization (Wikipedia) <https://en.wikipedia.org/wiki/Derivative-free_optimization>`_ (a.k.a., derivative-free optimization) with DeepHyper.

Black-box optimization is a field of optimization research where an objective function :math:`f(x) = y \in \mathbb{R}` is optimized only based on input-output observations :math:`\{ (x_1,y_1), \ldots, (x_n, y_n) \}`.
 
Let's start by installing DeepHyper!

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: bash

    %%bash
    pip install deephyper

.. GENERATED FROM PYTHON SOURCE LINES 22-23

Then, we can import it and check the installed version:

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: Python


    import deephyper
    print(deephyper.__version__)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.9.2




.. GENERATED FROM PYTHON SOURCE LINES 28-41

Optimization Problem
--------------------

The optimization problem is based  on two components:

1. The black-box function that we want to optimize.
2. The search space or domain of input variables over which we want to optimize.

Black-Box Function
~~~~~~~~~~~~~~~~~~

DeepHyper is developed to optimize black-box functions.
Here, we define the function :math:`f(x) = - x ^ 2` that we want to maximise (the maximum being :math:`f(x=0) = 0` on :math:`I_x = [-10;10]`). The black-box function ``f`` takes as input a ``job`` that follows a dictionary interface from which we retrieve the variables of interest.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: Python

    def f(job):
        return -job.parameters["x"] ** 2








.. GENERATED FROM PYTHON SOURCE LINES 47-51

Search Space of Input Variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this example, we have only one variable :math:`x` for the black-box functin :math:`f`. We empirically decide to optimize this variable $x$ on the interval :math:`I_x = [-10;10]`. To do so we use the :class:`deephyper.hpo.HpProblem` from DeepHyper and add a **real** hyperparameter by using a tuple of two floats.

.. GENERATED FROM PYTHON SOURCE LINES 53-63

.. code-block:: Python

    from deephyper.hpo import HpProblem


    problem = HpProblem()

    # Define the variable you want to optimize
    problem.add_hyperparameter((-10.0, 10.0), "x")

    problem





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Configuration space object:
      Hyperparameters:
        x, Type: UniformFloat, Range: [-10.0, 10.0], Default: 0.0




.. GENERATED FROM PYTHON SOURCE LINES 64-73

Evaluator Interface
-------------------

DeepHyper uses an API called :class:`deephyper.evaluator.Evaluator` to distribute the computation of black-box functions and adapt to different backends (e.g., threads, processes, MPI, Ray). An ``Evaluator`` object wraps the black-box function ``f`` that we want to optimize. Then a ``method`` parameter is used to select the backend and ``method_kwargs`` defines some available options of this backend.


.. hint:: The ``method="thread"`` provides parallel computation only if the black-box is releasing the global interpretor lock (GIL). Therefore, if you want parallelism in Jupyter notebooks you should use the Ray evaluator (``method="ray"``) after installing Ray with ``pip install ray``.

It is possible to define callbacks to extend the behaviour of ``Evaluator`` each time a function-evaluation is launched or completed. In this example we use the :class:`deephyper.evaluator.callback.TqdmCallback` to follow the completed evaluations and the evolution of the objective with a progress-bar.

.. GENERATED FROM PYTHON SOURCE LINES 73-90

.. code-block:: Python


    from deephyper.evaluator import Evaluator
    from deephyper.evaluator.callback import TqdmCallback


    # define the evaluator to distribute the computation
    evaluator = Evaluator.create(
        f,
        method="thread",
        method_kwargs={
            "num_workers": 4,
            "callbacks": [TqdmCallback()]
        },
    )

    print(f"Evaluator has {evaluator.num_workers} available worker{'' if evaluator.num_workers == 1 else 's'}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluator has 4 available workers




.. GENERATED FROM PYTHON SOURCE LINES 91-95

Search Algorithm
----------------

The next step is to define the search algorithm that we want to use. Here, we choose :class:`deephyper.hpo.CBO` (Centralized Bayesian Optimization) which is a sampling based Bayesian optimization strategy. This algorithm has the advantage of being asynchronous thanks to a constant liar strategy which is crutial to keep a good utilization of the resources when the number of available workers increases.

.. GENERATED FROM PYTHON SOURCE LINES 95-107

.. code-block:: Python


    from deephyper.hpo import CBO

    # define your search
    search = CBO(
        problem,
        evaluator,
        acq_func="UCB",  # Acquisition function to Upper Confidence Bound
        multi_point_strategy="qUCB",  # Fast Multi-point strategy with q-Upper Confidence Bound
        n_jobs=2,  # Number of threads to fit surrogate models in parallel
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    WARNING:root:Results file already exists, it will be renamed to /Users/35e/Projects/DeepHyper/deephyper/examples/examples_bbo/results_20250228-121430.csv




.. GENERATED FROM PYTHON SOURCE LINES 108-109

Then, we can execute the search for a given number of iterations by using the ``search.search(max_evals=...)``. It is also possible to use the ``timeout`` parameter if one needs a specific time budget (e.g., restricted computational time in machine learning competitions, allocation time in HPC).

.. GENERATED FROM PYTHON SOURCE LINES 111-113

.. code-block:: Python

    results = search.search(max_evals=100)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?it/s]      1%|          | 1/100 [00:00<00:00, 11491.24it/s, failures=0, objective=-30.8]      2%|▏         | 2/100 [00:00<00:00, 5588.68it/s, failures=0, objective=-11.6]       3%|▎         | 3/100 [00:00<00:00, 5236.33it/s, failures=0, objective=-11.6]      4%|▍         | 4/100 [00:00<00:00, 5147.96it/s, failures=0, objective=-11.6]      5%|▌         | 5/100 [00:00<00:00, 145.20it/s, failures=0, objective=-11.6]       6%|▌         | 6/100 [00:00<00:00, 172.73it/s, failures=0, objective=-11.6]      7%|▋         | 7/100 [00:00<00:00, 200.29it/s, failures=0, objective=-11.6]      8%|▊         | 8/100 [00:00<00:00, 227.43it/s, failures=0, objective=-11.6]      9%|▉         | 9/100 [00:00<00:00, 147.76it/s, failures=0, objective=-2.22]     10%|█         | 10/100 [00:00<00:00, 163.39it/s, failures=0, objective=-2.22]     11%|█         | 11/100 [00:00<00:00, 179.14it/s, failures=0, objective=-2.22]     12%|█▏        | 12/100 [00:00<00:00, 194.81it/s, failures=0, objective=-2.22]     13%|█▎        | 13/100 [00:00<00:03, 27.77it/s, failures=0, objective=-2.22]      13%|█▎        | 13/100 [00:00<00:03, 27.77it/s, failures=0, objective=-2.22]     14%|█▍        | 14/100 [00:00<00:03, 27.77it/s, failures=0, objective=-2.22]     15%|█▌        | 15/100 [00:00<00:03, 27.77it/s, failures=0, objective=-2.21]     16%|█▌        | 16/100 [00:00<00:03, 27.77it/s, failures=0, objective=-2.21]     17%|█▋        | 17/100 [00:00<00:03, 21.57it/s, failures=0, objective=-2.21]     17%|█▋        | 17/100 [00:00<00:03, 21.57it/s, failures=0, objective=-0.0168]     18%|█▊        | 18/100 [00:00<00:03, 21.57it/s, failures=0, objective=-0.0168]     19%|█▉        | 19/100 [00:00<00:03, 21.57it/s, failures=0, objective=-0.0168]     20%|██        | 20/100 [00:00<00:03, 21.57it/s, failures=0, objective=-0.0168]     21%|██        | 21/100 [00:01<00:04, 16.56it/s, failures=0, objective=-0.0168]     21%|██        | 21/100 [00:01<00:04, 16.56it/s, failures=0, objective=-0.0168]     22%|██▏       | 22/100 [00:01<00:04, 16.56it/s, failures=0, objective=-0.0168]     23%|██▎       | 23/100 [00:01<00:04, 16.56it/s, failures=0, objective=-0.0168]     24%|██▍       | 24/100 [00:01<00:04, 16.56it/s, failures=0, objective=-0.0168]     25%|██▌       | 25/100 [00:01<00:04, 15.52it/s, failures=0, objective=-0.0168]     25%|██▌       | 25/100 [00:01<00:04, 15.52it/s, failures=0, objective=-0.0168]     26%|██▌       | 26/100 [00:01<00:04, 15.52it/s, failures=0, objective=-0.0168]     27%|██▋       | 27/100 [00:01<00:04, 15.52it/s, failures=0, objective=-0.0168]     28%|██▊       | 28/100 [00:01<00:04, 15.52it/s, failures=0, objective=-0.0168]     29%|██▉       | 29/100 [00:01<00:04, 15.00it/s, failures=0, objective=-0.0168]     29%|██▉       | 29/100 [00:01<00:04, 15.00it/s, failures=0, objective=-0.014]      30%|███       | 30/100 [00:01<00:04, 15.00it/s, failures=0, objective=-0.000418]     31%|███       | 31/100 [00:01<00:04, 15.00it/s, failures=0, objective=-0.000418]     32%|███▏      | 32/100 [00:01<00:04, 15.00it/s, failures=0, objective=-0.000418]     33%|███▎      | 33/100 [00:02<00:05, 13.30it/s, failures=0, objective=-0.000418]     33%|███▎      | 33/100 [00:02<00:05, 13.30it/s, failures=0, objective=-0.000418]     34%|███▍      | 34/100 [00:02<00:04, 13.30it/s, failures=0, objective=-0.000418]     35%|███▌      | 35/100 [00:02<00:04, 13.30it/s, failures=0, objective=-0.000418]     36%|███▌      | 36/100 [00:02<00:04, 13.30it/s, failures=0, objective=-0.000418]     37%|███▋      | 37/100 [00:02<00:04, 13.38it/s, failures=0, objective=-0.000418]     37%|███▋      | 37/100 [00:02<00:04, 13.38it/s, failures=0, objective=-0.000169]     38%|███▊      | 38/100 [00:02<00:04, 13.38it/s, failures=0, objective=-0.000169]     39%|███▉      | 39/100 [00:02<00:04, 13.38it/s, failures=0, objective=-0.000169]     40%|████      | 40/100 [00:02<00:04, 13.38it/s, failures=0, objective=-0.000146]     41%|████      | 41/100 [00:02<00:05, 11.55it/s, failures=0, objective=-0.000146]     41%|████      | 41/100 [00:02<00:05, 11.55it/s, failures=0, objective=-0.000146]     42%|████▏     | 42/100 [00:02<00:05, 11.55it/s, failures=0, objective=-0.000146]     43%|████▎     | 43/100 [00:02<00:04, 11.55it/s, failures=0, objective=-4.51e-5]      44%|████▍     | 44/100 [00:02<00:04, 11.55it/s, failures=0, objective=-4.51e-5]     45%|████▌     | 45/100 [00:03<00:04, 12.19it/s, failures=0, objective=-4.51e-5]     45%|████▌     | 45/100 [00:03<00:04, 12.19it/s, failures=0, objective=-6.18e-7]     46%|████▌     | 46/100 [00:03<00:04, 12.19it/s, failures=0, objective=-6.18e-7]     47%|████▋     | 47/100 [00:03<00:04, 12.19it/s, failures=0, objective=-6.18e-7]     48%|████▊     | 48/100 [00:03<00:04, 12.19it/s, failures=0, objective=-6.18e-7]     49%|████▉     | 49/100 [00:03<00:04, 11.43it/s, failures=0, objective=-6.18e-7]     49%|████▉     | 49/100 [00:03<00:04, 11.43it/s, failures=0, objective=-6.18e-7]     50%|█████     | 50/100 [00:03<00:04, 11.43it/s, failures=0, objective=-6.18e-7]     51%|█████     | 51/100 [00:03<00:04, 11.43it/s, failures=0, objective=-6.18e-7]     52%|█████▏    | 52/100 [00:03<00:04, 11.43it/s, failures=0, objective=-6.18e-7]     53%|█████▎    | 53/100 [00:03<00:03, 12.13it/s, failures=0, objective=-6.18e-7]     53%|█████▎    | 53/100 [00:03<00:03, 12.13it/s, failures=0, objective=-6.18e-7]     54%|█████▍    | 54/100 [00:03<00:03, 12.13it/s, failures=0, objective=-6.18e-7]     55%|█████▌    | 55/100 [00:03<00:03, 12.13it/s, failures=0, objective=-6.18e-7]     56%|█████▌    | 56/100 [00:03<00:03, 12.13it/s, failures=0, objective=-6.18e-7]     57%|█████▋    | 57/100 [00:04<00:03, 13.13it/s, failures=0, objective=-6.18e-7]     57%|█████▋    | 57/100 [00:04<00:03, 13.13it/s, failures=0, objective=-8.36e-9]     58%|█████▊    | 58/100 [00:04<00:03, 13.13it/s, failures=0, objective=-8.36e-9]     59%|█████▉    | 59/100 [00:04<00:03, 13.13it/s, failures=0, objective=-8.36e-9]     60%|██████    | 60/100 [00:04<00:03, 13.13it/s, failures=0, objective=-8.36e-9]     61%|██████    | 61/100 [00:04<00:03, 12.55it/s, failures=0, objective=-8.36e-9]     61%|██████    | 61/100 [00:04<00:03, 12.55it/s, failures=0, objective=-8.36e-9]     62%|██████▏   | 62/100 [00:04<00:03, 12.55it/s, failures=0, objective=-3.72e-9]     63%|██████▎   | 63/100 [00:04<00:02, 12.55it/s, failures=0, objective=-3.72e-9]     64%|██████▍   | 64/100 [00:04<00:02, 12.55it/s, failures=0, objective=-3.72e-9]     65%|██████▌   | 65/100 [00:04<00:02, 13.27it/s, failures=0, objective=-3.72e-9]     65%|██████▌   | 65/100 [00:04<00:02, 13.27it/s, failures=0, objective=-3.72e-9]     66%|██████▌   | 66/100 [00:04<00:02, 13.27it/s, failures=0, objective=-3.72e-9]     67%|██████▋   | 67/100 [00:04<00:02, 13.27it/s, failures=0, objective=-3.72e-9]     68%|██████▊   | 68/100 [00:04<00:02, 13.27it/s, failures=0, objective=-3.72e-9]     69%|██████▉   | 69/100 [00:05<00:02, 12.70it/s, failures=0, objective=-3.72e-9]     69%|██████▉   | 69/100 [00:05<00:02, 12.70it/s, failures=0, objective=-3.72e-9]     70%|███████   | 70/100 [00:05<00:02, 12.70it/s, failures=0, objective=-3.72e-9]     71%|███████   | 71/100 [00:05<00:02, 12.70it/s, failures=0, objective=-3.72e-9]     72%|███████▏  | 72/100 [00:05<00:02, 12.70it/s, failures=0, objective=-3.72e-9]     73%|███████▎  | 73/100 [00:05<00:02, 13.43it/s, failures=0, objective=-3.72e-9]     73%|███████▎  | 73/100 [00:05<00:02, 13.43it/s, failures=0, objective=-3.72e-9]     74%|███████▍  | 74/100 [00:05<00:01, 13.43it/s, failures=0, objective=-3.72e-9]     75%|███████▌  | 75/100 [00:05<00:01, 13.43it/s, failures=0, objective=-3.72e-9]     76%|███████▌  | 76/100 [00:05<00:01, 13.43it/s, failures=0, objective=-3.72e-9]     77%|███████▋  | 77/100 [00:05<00:01, 12.50it/s, failures=0, objective=-3.72e-9]     77%|███████▋  | 77/100 [00:05<00:01, 12.50it/s, failures=0, objective=-3.72e-9]     78%|███████▊  | 78/100 [00:05<00:01, 12.50it/s, failures=0, objective=-3.72e-9]     79%|███████▉  | 79/100 [00:05<00:01, 12.50it/s, failures=0, objective=-3.72e-9]     80%|████████  | 80/100 [00:05<00:01, 12.50it/s, failures=0, objective=-3.72e-9]     81%|████████  | 81/100 [00:05<00:01, 12.86it/s, failures=0, objective=-3.72e-9]     81%|████████  | 81/100 [00:05<00:01, 12.86it/s, failures=0, objective=-3.72e-9]     82%|████████▏ | 82/100 [00:05<00:01, 12.86it/s, failures=0, objective=-3.72e-9]     83%|████████▎ | 83/100 [00:05<00:01, 12.86it/s, failures=0, objective=-3.72e-9]     84%|████████▍ | 84/100 [00:05<00:01, 12.86it/s, failures=0, objective=-3.72e-9]     85%|████████▌ | 85/100 [00:06<00:01, 12.47it/s, failures=0, objective=-3.72e-9]     85%|████████▌ | 85/100 [00:06<00:01, 12.47it/s, failures=0, objective=-3.72e-9]     86%|████████▌ | 86/100 [00:06<00:01, 12.47it/s, failures=0, objective=-3.72e-9]     87%|████████▋ | 87/100 [00:06<00:01, 12.47it/s, failures=0, objective=-3.72e-9]     88%|████████▊ | 88/100 [00:06<00:00, 12.47it/s, failures=0, objective=-3.72e-9]     89%|████████▉ | 89/100 [00:06<00:00, 11.02it/s, failures=0, objective=-3.72e-9]     89%|████████▉ | 89/100 [00:06<00:00, 11.02it/s, failures=0, objective=-3.72e-9]     90%|█████████ | 90/100 [00:06<00:00, 11.02it/s, failures=0, objective=-3.72e-9]     91%|█████████ | 91/100 [00:06<00:00, 11.02it/s, failures=0, objective=-3.72e-9]     92%|█████████▏| 92/100 [00:06<00:00, 11.02it/s, failures=0, objective=-3.72e-9]     93%|█████████▎| 93/100 [00:06<00:00, 11.96it/s, failures=0, objective=-3.72e-9]     93%|█████████▎| 93/100 [00:06<00:00, 11.96it/s, failures=0, objective=-3.72e-9]     94%|█████████▍| 94/100 [00:06<00:00, 11.96it/s, failures=0, objective=-3.72e-9]     95%|█████████▌| 95/100 [00:06<00:00, 11.96it/s, failures=0, objective=-3.72e-9]     96%|█████████▌| 96/100 [00:06<00:00, 11.96it/s, failures=0, objective=-3.72e-9]     97%|█████████▋| 97/100 [00:07<00:00, 11.76it/s, failures=0, objective=-3.72e-9]     97%|█████████▋| 97/100 [00:07<00:00, 11.76it/s, failures=0, objective=-3.72e-9]     98%|█████████▊| 98/100 [00:07<00:00, 11.76it/s, failures=0, objective=-3.72e-9]     99%|█████████▉| 99/100 [00:07<00:00, 11.76it/s, failures=0, objective=-3.72e-9]    100%|██████████| 100/100 [00:07<00:00, 11.76it/s, failures=0, objective=-3.72e-9]



.. GENERATED FROM PYTHON SOURCE LINES 114-122

Finally, let us visualize the results. The ``search(...)`` returns a DataFrame also saved locally under ``results.csv`` (in case of crash we don't want to lose the possibly expensive evaluations already performed).

The DataFrame contains as columns:

1. the optimized hyperparameters: such as :math:`x` with name ``p:x``.
2. the ``objective`` **maximised** which directly match the results of the :math:`f` function in our example.
3. the ``job_id`` of each evaluated function (increased incrementally following the order of created evaluations).
4. the time of creation/collection of each task ``timestamp_submit`` and ``timestamp_gather`` respectively (in secondes, since the creation of the Evaluator).

.. GENERATED FROM PYTHON SOURCE LINES 124-126

.. code-block:: Python

    results






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>p:x</th>
          <th>objective</th>
          <th>job_id</th>
          <th>job_status</th>
          <th>m:timestamp_submit</th>
          <th>m:timestamp_gather</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>-5.553139</td>
          <td>-3.083736e+01</td>
          <td>1</td>
          <td>DONE</td>
          <td>0.054208</td>
          <td>0.055617</td>
        </tr>
        <tr>
          <th>1</th>
          <td>3.411852</td>
          <td>-1.164074e+01</td>
          <td>0</td>
          <td>DONE</td>
          <td>0.054146</td>
          <td>0.057126</td>
        </tr>
        <tr>
          <th>2</th>
          <td>-6.826507</td>
          <td>-4.660119e+01</td>
          <td>2</td>
          <td>DONE</td>
          <td>0.054227</td>
          <td>0.057351</td>
        </tr>
        <tr>
          <th>3</th>
          <td>-6.686544</td>
          <td>-4.470987e+01</td>
          <td>3</td>
          <td>DONE</td>
          <td>0.054243</td>
          <td>0.057552</td>
        </tr>
        <tr>
          <th>4</th>
          <td>5.998550</td>
          <td>-3.598260e+01</td>
          <td>4</td>
          <td>DONE</td>
          <td>0.090079</td>
          <td>0.091179</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>95</th>
          <td>-0.000437</td>
          <td>-1.911849e-07</td>
          <td>94</td>
          <td>DONE</td>
          <td>7.054623</td>
          <td>7.055794</td>
        </tr>
        <tr>
          <th>96</th>
          <td>-0.000294</td>
          <td>-8.648508e-08</td>
          <td>96</td>
          <td>DONE</td>
          <td>7.407744</td>
          <td>7.408347</td>
        </tr>
        <tr>
          <th>97</th>
          <td>-0.000582</td>
          <td>-3.384953e-07</td>
          <td>97</td>
          <td>DONE</td>
          <td>7.407769</td>
          <td>7.408717</td>
        </tr>
        <tr>
          <th>98</th>
          <td>-0.000582</td>
          <td>-3.384953e-07</td>
          <td>99</td>
          <td>DONE</td>
          <td>7.407792</td>
          <td>7.408890</td>
        </tr>
        <tr>
          <th>99</th>
          <td>-0.000582</td>
          <td>-3.384953e-07</td>
          <td>98</td>
          <td>DONE</td>
          <td>7.407781</td>
          <td>7.409058</td>
        </tr>
      </tbody>
    </table>
    <p>100 rows × 6 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 127-128

To get the parameters at the observed maximum value we can use the :func:`deephyper.analysis.hpo.parameters_at_max`:

.. GENERATED FROM PYTHON SOURCE LINES 128-137

.. code-block:: Python


    from deephyper.analysis.hpo import parameters_at_max


    parameters, objective = parameters_at_max(results)
    print("\nOptimum values")
    print("x:", parameters["x"])
    print("objective:", objective)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Optimum values
    x: -6.098006986832161e-05
    objective: -3.7185689211453846e-09




.. GENERATED FROM PYTHON SOURCE LINES 138-139

We can also plot the evolution of the objective to verify that we converge correctly toward :math:`0`.

.. GENERATED FROM PYTHON SOURCE LINES 139-151

.. code-block:: Python


    import matplotlib.pyplot as plt
    from deephyper.analysis.hpo import plot_search_trajectory_single_objective_hpo


    WIDTH_PLOTS = 8
    HEIGHT_PLOTS = WIDTH_PLOTS / 1.618

    fig, ax = plt.subplots(figsize=(WIDTH_PLOTS, HEIGHT_PLOTS))
    plot_search_trajectory_single_objective_hpo(results, mode="min", ax=ax)
    _ = plt.title("Search Trajectory")
    _ = plt.yscale("log")



.. image-sg:: /examples/examples_bbo/images/sphx_glr_plot_black_box_optimization_001.png
   :alt: Search Trajectory
   :srcset: /examples/examples_bbo/images/sphx_glr_plot_black_box_optimization_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.886 seconds)


.. _sphx_glr_download_examples_examples_bbo_plot_black_box_optimization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_black_box_optimization.ipynb <plot_black_box_optimization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_black_box_optimization.py <plot_black_box_optimization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_black_box_optimization.zip <plot_black_box_optimization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
